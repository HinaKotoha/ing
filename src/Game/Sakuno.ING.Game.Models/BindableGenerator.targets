<Project>
  <ItemGroup>
    <UpToDateCheckInput Include="$(MSBuildThisFileFullPath);@(BindableTemplate)" />
    <None Update="@(BindableTemplate)">
      <Generator>MSBuild:UpdateBindableTemplate</Generator>
      <LastGenOutput>%(RelativeDir)%(Filename).g.cs</LastGenOutput>
    </None>
  </ItemGroup>
  
  <UsingTask TaskName="CalculatedBindableTemplate" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Inputs ParameterType="System.String[]" Required="True" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Xml.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
foreach (var infile in Inputs)
{
    string outfile = Path.ChangeExtension(infile, ".g.cs");
    Log.LogMessage("{0} -> {1}", infile, outfile);
    XElement root;
    using (var input = File.OpenText(infile))
        root = XDocument.Load(input).Root;

    using (var output = File.CreateText(outfile))
    {
        output.WriteLine("//------------------------------------------------------------------------------");
        output.WriteLine("// <auto-generated>");
        output.WriteLine("//     This code was generated by a tool.");
        output.WriteLine("//");
        output.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
        output.WriteLine("//     the code is regenerated.");
        output.WriteLine("// </auto-generated>");
        output.WriteLine("//------------------------------------------------------------------------------");

        output.WriteLine("using System;");
        output.WriteLine("using System.ComponentModel;");
        foreach (var ns in root.Elements("using"))
            output.WriteLine($"using {ns.Value};");
        output.WriteLine();

        output.WriteLine($"namespace {root.Attribute("namespace").Value}");
        output.WriteLine("{");

        foreach (var c in root.Elements("class"))
        {
            string thisClass = c.Attribute("name").Value;
            output.WriteLine($"    partial class {thisClass}");
            output.WriteLine("    {");
            foreach (var p in c.Elements("property"))
            {
                output.WriteLine();
                string propName = p.Attribute("name").Value;
                string propType = p.Attribute("type").Value;
                string fieldName = "_" + char.ToLowerInvariant(propName[0]) + propName.Substring(1);
                string accessibility = p.Attribute("set")?.Value ?? "private";
                output.WriteLine("        [EditorBrowsable(EditorBrowsableState.Never)]");
                output.WriteLine($"        private static readonly PropertyChangedEventArgs __eventArgs{fieldName} = new PropertyChangedEventArgs(nameof({propName}));");
                output.WriteLine("        [EditorBrowsable(EditorBrowsableState.Never)]");
                output.WriteLine($"        private {propType} {fieldName};");
                output.WriteLine($"        public {propType} {propName}");
                output.WriteLine("        {");
                output.WriteLine($"            get => {fieldName};");
                output.WriteLine($"            {accessibility} set => Set(ref {fieldName}, value, __eventArgs{fieldName});");
                output.WriteLine("        }");
            }
            output.WriteLine("    }");
        }

        output.WriteLine("}");
    }
}
                ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="UpdateBindableTemplate" Inputs="$(MSBuildThisFileFullPath);@(BindableTemplate)" Outputs="@(BindableTemplate->'%(RelativeDir)%(Filename).g.cs')" BeforeTargets="CoreCompile">
    <CalculatedBindableTemplate Inputs="@(BindableTemplate)" />
  </Target>

  <PropertyGroup>
    <CoreCompileDependsOn>UpdateBindableTemplate;$(CoreCompileDependsOn)</CoreCompileDependsOn>
  </PropertyGroup>
</Project>
