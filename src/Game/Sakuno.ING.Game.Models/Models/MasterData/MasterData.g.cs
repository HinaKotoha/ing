//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;

namespace Sakuno.ING.Game.Models.MasterData
{
    public sealed partial class ShipInfo : BindableObject, IUpdatable<ShipInfoId, RawShipInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_sortNo = new PropertyChangedEventArgs(nameof(SortNo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _sortNo;
        public int SortNo
        {
            get => _sortNo;
            private set => Set(ref _sortNo, value, __eventArgs_sortNo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isAbyssal = new PropertyChangedEventArgs(nameof(IsAbyssal));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isAbyssal;
        public bool IsAbyssal
        {
            get => _isAbyssal;
            private set => Set(ref _isAbyssal, value, __eventArgs_isAbyssal);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_type = new PropertyChangedEventArgs(nameof(Type));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipTypeInfo _type;
        public ShipTypeInfo Type
        {
            get => _type;
            private set => Set(ref _type, value, __eventArgs_type);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_classId = new PropertyChangedEventArgs(nameof(ClassId));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _classId;
        public int ClassId
        {
            get => _classId;
            private set => Set(ref _classId, value, __eventArgs_classId);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUpgrade = new PropertyChangedEventArgs(nameof(CanUpgrade));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUpgrade;
        public bool CanUpgrade
        {
            get => _canUpgrade;
            private set => Set(ref _canUpgrade, value, __eventArgs_canUpgrade);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_upgradeTo = new PropertyChangedEventArgs(nameof(UpgradeTo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipInfo _upgradeTo;
        public ShipInfo UpgradeTo
        {
            get => _upgradeTo;
            private set => Set(ref _upgradeTo, value, __eventArgs_upgradeTo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_upgradeConsumption = new PropertyChangedEventArgs(nameof(UpgradeConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _upgradeConsumption;
        public Materials UpgradeConsumption
        {
            get => _upgradeConsumption;
            private set => Set(ref _upgradeConsumption, value, __eventArgs_upgradeConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_upgradeSpecialConsumption = new PropertyChangedEventArgs(nameof(UpgradeSpecialConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private IReadOnlyCollection<UseItemRecord> _upgradeSpecialConsumption;
        public IReadOnlyCollection<UseItemRecord> UpgradeSpecialConsumption
        {
            get => _upgradeSpecialConsumption;
            private set => Set(ref _upgradeSpecialConsumption, value, __eventArgs_upgradeSpecialConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_hP = new PropertyChangedEventArgs(nameof(HP));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _hP;
        public ShipMordenizationStatus HP
        {
            get => _hP;
            private set => Set(ref _hP, value, __eventArgs_hP);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_armor = new PropertyChangedEventArgs(nameof(Armor));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _armor;
        public ShipMordenizationStatus Armor
        {
            get => _armor;
            private set => Set(ref _armor, value, __eventArgs_armor);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_firepower = new PropertyChangedEventArgs(nameof(Firepower));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _firepower;
        public ShipMordenizationStatus Firepower
        {
            get => _firepower;
            private set => Set(ref _firepower, value, __eventArgs_firepower);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_torpedo = new PropertyChangedEventArgs(nameof(Torpedo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _torpedo;
        public ShipMordenizationStatus Torpedo
        {
            get => _torpedo;
            private set => Set(ref _torpedo, value, __eventArgs_torpedo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiAir = new PropertyChangedEventArgs(nameof(AntiAir));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _antiAir;
        public ShipMordenizationStatus AntiAir
        {
            get => _antiAir;
            private set => Set(ref _antiAir, value, __eventArgs_antiAir);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_luck = new PropertyChangedEventArgs(nameof(Luck));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _luck;
        public ShipMordenizationStatus Luck
        {
            get => _luck;
            private set => Set(ref _luck, value, __eventArgs_luck);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_speed = new PropertyChangedEventArgs(nameof(Speed));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipSpeed _speed;
        public ShipSpeed Speed
        {
            get => _speed;
            private set => Set(ref _speed, value, __eventArgs_speed);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fireRange = new PropertyChangedEventArgs(nameof(FireRange));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FireRange _fireRange;
        public FireRange FireRange
        {
            get => _fireRange;
            private set => Set(ref _fireRange, value, __eventArgs_fireRange);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_slotCount = new PropertyChangedEventArgs(nameof(SlotCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _slotCount;
        public int SlotCount
        {
            get => _slotCount;
            private set => Set(ref _slotCount, value, __eventArgs_slotCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_aircraft = new PropertyChangedEventArgs(nameof(Aircraft));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private IReadOnlyList<int> _aircraft;
        public IReadOnlyList<int> Aircraft
        {
            get => _aircraft;
            private set => Set(ref _aircraft, value, __eventArgs_aircraft);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_totalAircraft = new PropertyChangedEventArgs(nameof(TotalAircraft));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _totalAircraft;
        public int? TotalAircraft
        {
            get => _totalAircraft;
            private set => Set(ref _totalAircraft, value, __eventArgs_totalAircraft);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_rarity = new PropertyChangedEventArgs(nameof(Rarity));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _rarity;
        public int Rarity
        {
            get => _rarity;
            private set => Set(ref _rarity, value, __eventArgs_rarity);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_dismantleAcquirement = new PropertyChangedEventArgs(nameof(DismantleAcquirement));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _dismantleAcquirement;
        public Materials DismantleAcquirement
        {
            get => _dismantleAcquirement;
            private set => Set(ref _dismantleAcquirement, value, __eventArgs_dismantleAcquirement);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_constructionTime = new PropertyChangedEventArgs(nameof(ConstructionTime));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TimeSpan _constructionTime;
        public TimeSpan ConstructionTime
        {
            get => _constructionTime;
            private set => Set(ref _constructionTime, value, __eventArgs_constructionTime);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_powerupWorth = new PropertyChangedEventArgs(nameof(PowerupWorth));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private IReadOnlyList<int> _powerupWorth;
        public IReadOnlyList<int> PowerupWorth
        {
            get => _powerupWorth;
            private set => Set(ref _powerupWorth, value, __eventArgs_powerupWorth);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fuelConsumption = new PropertyChangedEventArgs(nameof(FuelConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _fuelConsumption;
        public int FuelConsumption
        {
            get => _fuelConsumption;
            private set => Set(ref _fuelConsumption, value, __eventArgs_fuelConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_bulletConsumption = new PropertyChangedEventArgs(nameof(BulletConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _bulletConsumption;
        public int BulletConsumption
        {
            get => _bulletConsumption;
            private set => Set(ref _bulletConsumption, value, __eventArgs_bulletConsumption);
        }

        public TextTranslationGroup Introduction { get; } = new TextTranslationGroup();

        public ShipInfoId Id { get; }
        private readonly MasterDataRoot owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public ShipInfo(ShipInfoId id, MasterDataRoot owner)
        {
            Id = id;
            this.owner = owner;
            Introduction.Translation = owner.Localization?.GetLocalized("ShipIntro", id.ToString());
            CreateCore();
        }

        public ShipInfo(RawShipInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<ShipInfo, RawShipInfo, DateTimeOffset> Updating;
        public void Update(RawShipInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawShipInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Introduction != Introduction.Origin)
            {
                Introduction.Origin = raw.Introduction;
                NotifyPropertyChanged(nameof(Introduction));
            }

            SortNo = raw.SortNo;
            IsAbyssal = raw.IsAbyssal;
            ClassId = raw.ClassId;
            UpgradeConsumption = raw.UpgradeConsumption;
            UpgradeSpecialConsumption = raw.UpgradeSpecialConsumption;
            HP = raw.HP;
            Armor = raw.Armor;
            Firepower = raw.Firepower;
            Torpedo = raw.Torpedo;
            AntiAir = raw.AntiAir;
            Luck = raw.Luck;
            Speed = raw.Speed;
            FireRange = raw.FireRange;
            SlotCount = raw.SlotCount;
            Aircraft = raw.Aircraft;
            Rarity = raw.Rarity;
            DismantleAcquirement = raw.DismantleAcquirement;
            ConstructionTime = raw.ConstructionTime;
            PowerupWorth = raw.PowerupWorth;
            FuelConsumption = raw.FuelConsumption;
            BulletConsumption = raw.BulletConsumption;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawShipInfo raw, DateTimeOffset timeStamp);

        partial void CreateCore();
    }

    public sealed partial class ShipTypeInfo : BindableObject, IUpdatable<ShipTypeId, RawShipTypeInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_sortNo = new PropertyChangedEventArgs(nameof(SortNo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _sortNo;
        public int SortNo
        {
            get => _sortNo;
            private set => Set(ref _sortNo, value, __eventArgs_sortNo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_repairTimeRatio = new PropertyChangedEventArgs(nameof(RepairTimeRatio));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _repairTimeRatio;
        public int RepairTimeRatio
        {
            get => _repairTimeRatio;
            private set => Set(ref _repairTimeRatio, value, __eventArgs_repairTimeRatio);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_buildOutlineId = new PropertyChangedEventArgs(nameof(BuildOutlineId));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _buildOutlineId;
        public int BuildOutlineId
        {
            get => _buildOutlineId;
            private set => Set(ref _buildOutlineId, value, __eventArgs_buildOutlineId);
        }

        private readonly BindableSnapshotCollection<EquipmentTypeInfo> availableEquipmentTypes = new BindableSnapshotCollection<EquipmentTypeInfo>();
        public IReadOnlyList<EquipmentTypeInfo> AvailableEquipmentTypes => availableEquipmentTypes;

        public ShipTypeId Id { get; }
        private readonly MasterDataRoot owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public ShipTypeInfo(ShipTypeId id, MasterDataRoot owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public ShipTypeInfo(RawShipTypeInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<ShipTypeInfo, RawShipTypeInfo, DateTimeOffset> Updating;
        public void Update(RawShipTypeInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawShipTypeInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            SortNo = raw.SortNo;
            RepairTimeRatio = raw.RepairTimeRatio;
            BuildOutlineId = raw.BuildOutlineId;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawShipTypeInfo raw, DateTimeOffset timeStamp);

        partial void CreateCore();
    }

    public sealed partial class EquipmentTypeInfo : BindableObject, IUpdatable<EquipmentTypeId, RawEquipmentTypeInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_availableInExtraSlot = new PropertyChangedEventArgs(nameof(AvailableInExtraSlot));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _availableInExtraSlot;
        public bool AvailableInExtraSlot
        {
            get => _availableInExtraSlot;
            private set => Set(ref _availableInExtraSlot, value, __eventArgs_availableInExtraSlot);
        }

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public EquipmentTypeId Id { get; }
        private readonly MasterDataRoot owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public EquipmentTypeInfo(EquipmentTypeId id, MasterDataRoot owner)
        {
            Id = id;
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("EquipType", id.ToString());
            CreateCore();
        }

        public EquipmentTypeInfo(RawEquipmentTypeInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<EquipmentTypeInfo, RawEquipmentTypeInfo, DateTimeOffset> Updating;
        public void Update(RawEquipmentTypeInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawEquipmentTypeInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            AvailableInExtraSlot = raw.AvailableInExtraSlot;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawEquipmentTypeInfo raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"EquipmentTypeInfo {Id}: {Name.Origin}";
    }

    public sealed partial class EquipmentInfo : BindableObject, IUpdatable<EquipmentInfoId, RawEquipmentInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_type = new PropertyChangedEventArgs(nameof(Type));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private EquipmentTypeInfo _type;
        public EquipmentTypeInfo Type
        {
            get => _type;
            private set => Set(ref _type, value, __eventArgs_type);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_iconId = new PropertyChangedEventArgs(nameof(IconId));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _iconId;
        public int IconId
        {
            get => _iconId;
            private set => Set(ref _iconId, value, __eventArgs_iconId);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_firepower = new PropertyChangedEventArgs(nameof(Firepower));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _firepower;
        public int Firepower
        {
            get => _firepower;
            private set => Set(ref _firepower, value, __eventArgs_firepower);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_torpedo = new PropertyChangedEventArgs(nameof(Torpedo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _torpedo;
        public int Torpedo
        {
            get => _torpedo;
            private set => Set(ref _torpedo, value, __eventArgs_torpedo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiAir = new PropertyChangedEventArgs(nameof(AntiAir));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _antiAir;
        public int AntiAir
        {
            get => _antiAir;
            private set => Set(ref _antiAir, value, __eventArgs_antiAir);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_armor = new PropertyChangedEventArgs(nameof(Armor));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _armor;
        public int Armor
        {
            get => _armor;
            private set => Set(ref _armor, value, __eventArgs_armor);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_diveBomberAttack = new PropertyChangedEventArgs(nameof(DiveBomberAttack));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _diveBomberAttack;
        public int DiveBomberAttack
        {
            get => _diveBomberAttack;
            private set => Set(ref _diveBomberAttack, value, __eventArgs_diveBomberAttack);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiSubmarine = new PropertyChangedEventArgs(nameof(AntiSubmarine));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _antiSubmarine;
        public int AntiSubmarine
        {
            get => _antiSubmarine;
            private set => Set(ref _antiSubmarine, value, __eventArgs_antiSubmarine);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_accuracy = new PropertyChangedEventArgs(nameof(Accuracy));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _accuracy;
        public int Accuracy
        {
            get => _accuracy;
            private set => Set(ref _accuracy, value, __eventArgs_accuracy);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_evasion = new PropertyChangedEventArgs(nameof(Evasion));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _evasion;
        public int Evasion
        {
            get => _evasion;
            private set => Set(ref _evasion, value, __eventArgs_evasion);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiBomber = new PropertyChangedEventArgs(nameof(AntiBomber));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _antiBomber;
        public int AntiBomber
        {
            get => _antiBomber;
            private set => Set(ref _antiBomber, value, __eventArgs_antiBomber);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_interception = new PropertyChangedEventArgs(nameof(Interception));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _interception;
        public int Interception
        {
            get => _interception;
            private set => Set(ref _interception, value, __eventArgs_interception);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_lineOfSight = new PropertyChangedEventArgs(nameof(LineOfSight));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _lineOfSight;
        public int LineOfSight
        {
            get => _lineOfSight;
            private set => Set(ref _lineOfSight, value, __eventArgs_lineOfSight);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fireRange = new PropertyChangedEventArgs(nameof(FireRange));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FireRange _fireRange;
        public FireRange FireRange
        {
            get => _fireRange;
            private set => Set(ref _fireRange, value, __eventArgs_fireRange);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_flightRadius = new PropertyChangedEventArgs(nameof(FlightRadius));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _flightRadius;
        public int FlightRadius
        {
            get => _flightRadius;
            private set => Set(ref _flightRadius, value, __eventArgs_flightRadius);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_deploymentConsumption = new PropertyChangedEventArgs(nameof(DeploymentConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _deploymentConsumption;
        public Materials DeploymentConsumption
        {
            get => _deploymentConsumption;
            private set => Set(ref _deploymentConsumption, value, __eventArgs_deploymentConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_dismantleAcquirement = new PropertyChangedEventArgs(nameof(DismantleAcquirement));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _dismantleAcquirement;
        public Materials DismantleAcquirement
        {
            get => _dismantleAcquirement;
            private set => Set(ref _dismantleAcquirement, value, __eventArgs_dismantleAcquirement);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_rarity = new PropertyChangedEventArgs(nameof(Rarity));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _rarity;
        public int Rarity
        {
            get => _rarity;
            private set => Set(ref _rarity, value, __eventArgs_rarity);
        }

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public TextTranslationGroup Description { get; } = new TextTranslationGroup();

        private readonly BindableSnapshotCollection<ShipInfo> extraSlotAcceptingShips = new BindableSnapshotCollection<ShipInfo>();
        public IReadOnlyList<ShipInfo> ExtraSlotAcceptingShips => extraSlotAcceptingShips;

        public EquipmentInfoId Id { get; }
        private readonly MasterDataRoot owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public EquipmentInfo(EquipmentInfoId id, MasterDataRoot owner)
        {
            Id = id;
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("EquipName", id.ToString());
            Description.Translation = owner.Localization?.GetLocalized("EquipDesc", id.ToString());
            CreateCore();
        }

        public EquipmentInfo(RawEquipmentInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<EquipmentInfo, RawEquipmentInfo, DateTimeOffset> Updating;
        public void Update(RawEquipmentInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawEquipmentInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            if (raw.Description != Description.Origin)
            {
                Description.Origin = raw.Description;
                NotifyPropertyChanged(nameof(Description));
            }

            IconId = raw.IconId;
            Firepower = raw.Firepower;
            Torpedo = raw.Torpedo;
            AntiAir = raw.AntiAir;
            Armor = raw.Armor;
            DiveBomberAttack = raw.DiveBomberAttack;
            AntiSubmarine = raw.AntiSubmarine;
            Accuracy = raw.Accuracy;
            Evasion = raw.Evasion;
            AntiBomber = raw.AntiBomber;
            Interception = raw.Interception;
            LineOfSight = raw.LineOfSight;
            FireRange = raw.FireRange;
            FlightRadius = raw.FlightRadius;
            DeploymentConsumption = raw.DeploymentConsumption;
            DismantleAcquirement = raw.DismantleAcquirement;
            Rarity = raw.Rarity;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawEquipmentInfo raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"EquipmentInfo {Id}: {Name.Origin}";
    }

    public sealed partial class UseItemInfo : BindableObject, IUpdatable<UseItemId, RawUseItem>
    {

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public UseItemId Id { get; }
        private readonly MasterDataRoot owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public UseItemInfo(UseItemId id, MasterDataRoot owner)
        {
            Id = id;
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("UseItem", id.ToString());
            CreateCore();
        }

        public UseItemInfo(RawUseItem raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<UseItemInfo, RawUseItem, DateTimeOffset> Updating;
        public void Update(RawUseItem raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawUseItem raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }


            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawUseItem raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"UseItemInfo {Id}: {Name.Origin}";
    }

    public sealed partial class MapAreaInfo : BindableObject, IUpdatable<MapAreaId, RawMapArea>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isEvent = new PropertyChangedEventArgs(nameof(IsEvent));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isEvent;
        public bool IsEvent
        {
            get => _isEvent;
            private set => Set(ref _isEvent, value, __eventArgs_isEvent);
        }

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public MapAreaId Id { get; }
        private readonly MasterDataRoot owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public MapAreaInfo(MapAreaId id, MasterDataRoot owner)
        {
            Id = id;
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("MapArea", id.ToString());
            CreateCore();
        }

        public MapAreaInfo(RawMapArea raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<MapAreaInfo, RawMapArea, DateTimeOffset> Updating;
        public void Update(RawMapArea raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawMapArea raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            IsEvent = raw.IsEvent;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawMapArea raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"MapAreaInfo {Id}: {Name.Origin}";
    }

    public sealed partial class MapInfo : BindableObject, IUpdatable<MapId, RawMapInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_mapArea = new PropertyChangedEventArgs(nameof(MapArea));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private MapAreaInfo _mapArea;
        public MapAreaInfo MapArea
        {
            get => _mapArea;
            private set => Set(ref _mapArea, value, __eventArgs_mapArea);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_starDifficulty = new PropertyChangedEventArgs(nameof(StarDifficulty));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _starDifficulty;
        public int StarDifficulty
        {
            get => _starDifficulty;
            private set => Set(ref _starDifficulty, value, __eventArgs_starDifficulty);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_requiredDefeatCount = new PropertyChangedEventArgs(nameof(RequiredDefeatCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _requiredDefeatCount;
        public int? RequiredDefeatCount
        {
            get => _requiredDefeatCount;
            private set => Set(ref _requiredDefeatCount, value, __eventArgs_requiredDefeatCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_bgmInfo = new PropertyChangedEventArgs(nameof(BgmInfo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private RawMapBgmInfo _bgmInfo;
        public RawMapBgmInfo BgmInfo
        {
            get => _bgmInfo;
            private set => Set(ref _bgmInfo, value, __eventArgs_bgmInfo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUseNormalFleet = new PropertyChangedEventArgs(nameof(CanUseNormalFleet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUseNormalFleet;
        public bool CanUseNormalFleet
        {
            get => _canUseNormalFleet;
            private set => Set(ref _canUseNormalFleet, value, __eventArgs_canUseNormalFleet);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUseStrikingForceFleet = new PropertyChangedEventArgs(nameof(CanUseStrikingForceFleet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUseStrikingForceFleet;
        public bool CanUseStrikingForceFleet
        {
            get => _canUseStrikingForceFleet;
            private set => Set(ref _canUseStrikingForceFleet, value, __eventArgs_canUseStrikingForceFleet);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUseCarrierTaskForceFleet = new PropertyChangedEventArgs(nameof(CanUseCarrierTaskForceFleet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUseCarrierTaskForceFleet;
        public bool CanUseCarrierTaskForceFleet
        {
            get => _canUseCarrierTaskForceFleet;
            private set => Set(ref _canUseCarrierTaskForceFleet, value, __eventArgs_canUseCarrierTaskForceFleet);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUseSurfaceTaskForceFleet = new PropertyChangedEventArgs(nameof(CanUseSurfaceTaskForceFleet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUseSurfaceTaskForceFleet;
        public bool CanUseSurfaceTaskForceFleet
        {
            get => _canUseSurfaceTaskForceFleet;
            private set => Set(ref _canUseSurfaceTaskForceFleet, value, __eventArgs_canUseSurfaceTaskForceFleet);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUseTransportEscortFleet = new PropertyChangedEventArgs(nameof(CanUseTransportEscortFleet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUseTransportEscortFleet;
        public bool CanUseTransportEscortFleet
        {
            get => _canUseTransportEscortFleet;
            private set => Set(ref _canUseTransportEscortFleet, value, __eventArgs_canUseTransportEscortFleet);
        }

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public TextTranslationGroup OperationName { get; } = new TextTranslationGroup();

        public TextTranslationGroup Description { get; } = new TextTranslationGroup();

        private readonly BindableSnapshotCollection<UseItemInfo> itemAcquirements = new BindableSnapshotCollection<UseItemInfo>();
        public IReadOnlyList<UseItemInfo> ItemAcquirements => itemAcquirements;

        public MapId Id { get; }
        private readonly MasterDataRoot owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public MapInfo(MapId id, MasterDataRoot owner)
        {
            Id = id;
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("MapName", id.ToString());
            OperationName.Translation = owner.Localization?.GetLocalized("MapOperation", id.ToString());
            Description.Translation = owner.Localization?.GetLocalized("MapDescription", id.ToString());
            CreateCore();
        }

        public MapInfo(RawMapInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<MapInfo, RawMapInfo, DateTimeOffset> Updating;
        public void Update(RawMapInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawMapInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            if (raw.OperationName != OperationName.Origin)
            {
                OperationName.Origin = raw.OperationName;
                NotifyPropertyChanged(nameof(OperationName));
            }

            if (raw.Description != Description.Origin)
            {
                Description.Origin = raw.Description;
                NotifyPropertyChanged(nameof(Description));
            }

            StarDifficulty = raw.StarDifficulty;
            RequiredDefeatCount = raw.RequiredDefeatCount;
            BgmInfo = raw.BgmInfo;
            CanUseNormalFleet = raw.CanUseNormalFleet;
            CanUseStrikingForceFleet = raw.CanUseStrikingForceFleet;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawMapInfo raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"MapInfo {Id}: {Name.Origin}";
    }

    public sealed partial class ExpeditionInfo : BindableObject, IUpdatable<ExpeditionId, RawExpeditionInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_displayId = new PropertyChangedEventArgs(nameof(DisplayId));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _displayId;
        public string DisplayId
        {
            get => _displayId;
            private set => Set(ref _displayId, value, __eventArgs_displayId);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_mapArea = new PropertyChangedEventArgs(nameof(MapArea));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private MapAreaInfo _mapArea;
        public MapAreaInfo MapArea
        {
            get => _mapArea;
            private set => Set(ref _mapArea, value, __eventArgs_mapArea);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_duration = new PropertyChangedEventArgs(nameof(Duration));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TimeSpan _duration;
        public TimeSpan Duration
        {
            get => _duration;
            private set => Set(ref _duration, value, __eventArgs_duration);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_requiredShipCount = new PropertyChangedEventArgs(nameof(RequiredShipCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _requiredShipCount;
        public int RequiredShipCount
        {
            get => _requiredShipCount;
            private set => Set(ref _requiredShipCount, value, __eventArgs_requiredShipCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_difficulty = new PropertyChangedEventArgs(nameof(Difficulty));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _difficulty;
        public int Difficulty
        {
            get => _difficulty;
            private set => Set(ref _difficulty, value, __eventArgs_difficulty);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fuelConsumption = new PropertyChangedEventArgs(nameof(FuelConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double _fuelConsumption;
        public double FuelConsumption
        {
            get => _fuelConsumption;
            private set => Set(ref _fuelConsumption, value, __eventArgs_fuelConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_bulletConsumption = new PropertyChangedEventArgs(nameof(BulletConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double _bulletConsumption;
        public double BulletConsumption
        {
            get => _bulletConsumption;
            private set => Set(ref _bulletConsumption, value, __eventArgs_bulletConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_rewardItem1 = new PropertyChangedEventArgs(nameof(RewardItem1));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private UseItemRecord? _rewardItem1;
        public UseItemRecord? RewardItem1
        {
            get => _rewardItem1;
            private set => Set(ref _rewardItem1, value, __eventArgs_rewardItem1);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_rewardItem2 = new PropertyChangedEventArgs(nameof(RewardItem2));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private UseItemRecord? _rewardItem2;
        public UseItemRecord? RewardItem2
        {
            get => _rewardItem2;
            private set => Set(ref _rewardItem2, value, __eventArgs_rewardItem2);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canRecall = new PropertyChangedEventArgs(nameof(CanRecall));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canRecall;
        public bool CanRecall
        {
            get => _canRecall;
            private set => Set(ref _canRecall, value, __eventArgs_canRecall);
        }

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public TextTranslationGroup Description { get; } = new TextTranslationGroup();

        public ExpeditionId Id { get; }
        private readonly MasterDataRoot owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public ExpeditionInfo(ExpeditionId id, MasterDataRoot owner)
        {
            Id = id;
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("ExpeditionName", id.ToString());
            Description.Translation = owner.Localization?.GetLocalized("ExpeditionDesc", id.ToString());
            CreateCore();
        }

        public ExpeditionInfo(RawExpeditionInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<ExpeditionInfo, RawExpeditionInfo, DateTimeOffset> Updating;
        public void Update(RawExpeditionInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawExpeditionInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            if (raw.Description != Description.Origin)
            {
                Description.Origin = raw.Description;
                NotifyPropertyChanged(nameof(Description));
            }

            DisplayId = raw.DisplayId;
            Duration = raw.Duration;
            RequiredShipCount = raw.RequiredShipCount;
            Difficulty = raw.Difficulty;
            FuelConsumption = raw.FuelConsumption;
            BulletConsumption = raw.BulletConsumption;
            RewardItem1 = raw.RewardItem1;
            RewardItem2 = raw.RewardItem2;
            CanRecall = raw.CanRecall;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawExpeditionInfo raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"ExpeditionInfo {Id}: {Name.Origin}";
    }

}
