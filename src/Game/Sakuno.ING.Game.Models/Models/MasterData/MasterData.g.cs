//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;

namespace Sakuno.ING.Game.Models.MasterData
{
    public sealed partial class ShipTypeInfo : BindableObject, IComparable<ShipTypeInfo>, IUpdatable<ShipTypeId, RawShipTypeInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        public int CompareTo(ShipTypeInfo other) => Id.CompareTo(other?.Id ?? default);

        public ShipTypeId Id { get; }
        private readonly MasterDataRoot _owner;

        public ShipTypeInfo(ShipTypeId id, MasterDataRoot owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public ShipTypeInfo(RawShipTypeInfo raw, MasterDataRoot owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawShipTypeInfo raw)
        {
            Name = raw.Name;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawShipTypeInfo raw);

        public override string ToString() => $"ShipTypeInfo {Id}";
    }

    public sealed partial class ShipInfo : BindableObject, IComparable<ShipInfo>, IUpdatable<ShipInfoId, RawShipInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isAbyssal = new PropertyChangedEventArgs(nameof(IsAbyssal));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isAbyssal;
        public bool IsAbyssal
        {
            get => _isAbyssal;
            private set => Set(ref _isAbyssal, value, __eventArgs_isAbyssal);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_type = new PropertyChangedEventArgs(nameof(Type));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipTypeInfo _type;
        public ShipTypeInfo Type
        {
            get => _type;
            private set => Set(ref _type, value, __eventArgs_type);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_classId = new PropertyChangedEventArgs(nameof(ClassId));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _classId;
        public int ClassId
        {
            get => _classId;
            private set => Set(ref _classId, value, __eventArgs_classId);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canRemodel = new PropertyChangedEventArgs(nameof(CanRemodel));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canRemodel;
        public bool CanRemodel
        {
            get => _canRemodel;
            private set => Set(ref _canRemodel, value, __eventArgs_canRemodel);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_remodelTo = new PropertyChangedEventArgs(nameof(RemodelTo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipInfo _remodelTo;
        public ShipInfo RemodelTo
        {
            get => _remodelTo;
            private set => Set(ref _remodelTo, value, __eventArgs_remodelTo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_remodelConsumption = new PropertyChangedEventArgs(nameof(RemodelConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _remodelConsumption;
        public Materials RemodelConsumption
        {
            get => _remodelConsumption;
            private set => Set(ref _remodelConsumption, value, __eventArgs_remodelConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_hP = new PropertyChangedEventArgs(nameof(HP));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _hP;
        public ShipModernizationStatus HP
        {
            get => _hP;
            private set => Set(ref _hP, value, __eventArgs_hP);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_armor = new PropertyChangedEventArgs(nameof(Armor));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _armor;
        public ShipModernizationStatus Armor
        {
            get => _armor;
            private set => Set(ref _armor, value, __eventArgs_armor);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_firepower = new PropertyChangedEventArgs(nameof(Firepower));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _firepower;
        public ShipModernizationStatus Firepower
        {
            get => _firepower;
            private set => Set(ref _firepower, value, __eventArgs_firepower);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_torpedo = new PropertyChangedEventArgs(nameof(Torpedo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _torpedo;
        public ShipModernizationStatus Torpedo
        {
            get => _torpedo;
            private set => Set(ref _torpedo, value, __eventArgs_torpedo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiAir = new PropertyChangedEventArgs(nameof(AntiAir));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _antiAir;
        public ShipModernizationStatus AntiAir
        {
            get => _antiAir;
            private set => Set(ref _antiAir, value, __eventArgs_antiAir);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_luck = new PropertyChangedEventArgs(nameof(Luck));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _luck;
        public ShipModernizationStatus Luck
        {
            get => _luck;
            private set => Set(ref _luck, value, __eventArgs_luck);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_speed = new PropertyChangedEventArgs(nameof(Speed));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipSpeed _speed;
        public ShipSpeed Speed
        {
            get => _speed;
            private set => Set(ref _speed, value, __eventArgs_speed);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fireRange = new PropertyChangedEventArgs(nameof(FireRange));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FireRange _fireRange;
        public FireRange FireRange
        {
            get => _fireRange;
            private set => Set(ref _fireRange, value, __eventArgs_fireRange);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_slotCount = new PropertyChangedEventArgs(nameof(SlotCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _slotCount;
        public int SlotCount
        {
            get => _slotCount;
            private set => Set(ref _slotCount, value, __eventArgs_slotCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_planeCapacities = new PropertyChangedEventArgs(nameof(PlaneCapacities));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private IReadOnlyList<int> _planeCapacities;
        public IReadOnlyList<int> PlaneCapacities
        {
            get => _planeCapacities;
            private set => Set(ref _planeCapacities, value, __eventArgs_planeCapacities);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_rarity = new PropertyChangedEventArgs(nameof(Rarity));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _rarity;
        public int Rarity
        {
            get => _rarity;
            private set => Set(ref _rarity, value, __eventArgs_rarity);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_constructionTime = new PropertyChangedEventArgs(nameof(ConstructionTime));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TimeSpan _constructionTime;
        public TimeSpan ConstructionTime
        {
            get => _constructionTime;
            private set => Set(ref _constructionTime, value, __eventArgs_constructionTime);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_dismantleAcquirement = new PropertyChangedEventArgs(nameof(DismantleAcquirement));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _dismantleAcquirement;
        public Materials DismantleAcquirement
        {
            get => _dismantleAcquirement;
            private set => Set(ref _dismantleAcquirement, value, __eventArgs_dismantleAcquirement);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_powerUpAmount = new PropertyChangedEventArgs(nameof(PowerUpAmount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private IReadOnlyList<int> _powerUpAmount;
        public IReadOnlyList<int> PowerUpAmount
        {
            get => _powerUpAmount;
            private set => Set(ref _powerUpAmount, value, __eventArgs_powerUpAmount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fuelConsumption = new PropertyChangedEventArgs(nameof(FuelConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _fuelConsumption;
        public int FuelConsumption
        {
            get => _fuelConsumption;
            private set => Set(ref _fuelConsumption, value, __eventArgs_fuelConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_bulletConsumption = new PropertyChangedEventArgs(nameof(BulletConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _bulletConsumption;
        public int BulletConsumption
        {
            get => _bulletConsumption;
            private set => Set(ref _bulletConsumption, value, __eventArgs_bulletConsumption);
        }

        public int CompareTo(ShipInfo other) => Id.CompareTo(other?.Id ?? default);

        public ShipInfoId Id { get; }
        private readonly MasterDataRoot _owner;

        public ShipInfo(ShipInfoId id, MasterDataRoot owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public ShipInfo(RawShipInfo raw, MasterDataRoot owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawShipInfo raw)
        {
            Name = raw.Name;
            IsAbyssal = raw.IsAbyssal;
            ClassId = raw.ClassId;
            RemodelConsumption = raw.RemodelConsumption;
            HP = raw.HP;
            Armor = raw.Armor;
            Firepower = raw.Firepower;
            Torpedo = raw.Torpedo;
            AntiAir = raw.AntiAir;
            Luck = raw.Luck;
            Speed = raw.Speed;
            FireRange = raw.FireRange;
            SlotCount = raw.SlotCount;
            PlaneCapacities = raw.PlaneCapacities;
            Rarity = raw.Rarity;
            ConstructionTime = raw.ConstructionTime;
            DismantleAcquirement = raw.DismantleAcquirement;
            PowerUpAmount = raw.PowerUpAmount;
            FuelConsumption = raw.FuelConsumption;
            BulletConsumption = raw.BulletConsumption;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawShipInfo raw);
    }

    public sealed partial class SlotItemTypeInfo : BindableObject, IComparable<SlotItemTypeInfo>, IUpdatable<SlotItemTypeId, RawSlotItemTypeInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        public int CompareTo(SlotItemTypeInfo other) => Id.CompareTo(other?.Id ?? default);

        public SlotItemTypeId Id { get; }
        private readonly MasterDataRoot _owner;

        public SlotItemTypeInfo(SlotItemTypeId id, MasterDataRoot owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public SlotItemTypeInfo(RawSlotItemTypeInfo raw, MasterDataRoot owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawSlotItemTypeInfo raw)
        {
            Name = raw.Name;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawSlotItemTypeInfo raw);

        public override string ToString() => $"SlotItemTypeInfo {Id}";
    }

    public sealed partial class SlotItemInfo : BindableObject, IComparable<SlotItemInfo>, IUpdatable<SlotItemInfoId, RawSlotItemInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_type = new PropertyChangedEventArgs(nameof(Type));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SlotItemTypeInfo _type;
        public SlotItemTypeInfo Type
        {
            get => _type;
            private set => Set(ref _type, value, __eventArgs_type);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_iconId = new PropertyChangedEventArgs(nameof(IconId));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _iconId;
        public int IconId
        {
            get => _iconId;
            private set => Set(ref _iconId, value, __eventArgs_iconId);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_planeId = new PropertyChangedEventArgs(nameof(PlaneId));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _planeId;
        public int PlaneId
        {
            get => _planeId;
            private set => Set(ref _planeId, value, __eventArgs_planeId);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_firepower = new PropertyChangedEventArgs(nameof(Firepower));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _firepower;
        public int Firepower
        {
            get => _firepower;
            private set => Set(ref _firepower, value, __eventArgs_firepower);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_torpedo = new PropertyChangedEventArgs(nameof(Torpedo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _torpedo;
        public int Torpedo
        {
            get => _torpedo;
            private set => Set(ref _torpedo, value, __eventArgs_torpedo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiAir = new PropertyChangedEventArgs(nameof(AntiAir));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _antiAir;
        public int AntiAir
        {
            get => _antiAir;
            private set => Set(ref _antiAir, value, __eventArgs_antiAir);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_armor = new PropertyChangedEventArgs(nameof(Armor));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _armor;
        public int Armor
        {
            get => _armor;
            private set => Set(ref _armor, value, __eventArgs_armor);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_diveBomberAttack = new PropertyChangedEventArgs(nameof(DiveBomberAttack));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _diveBomberAttack;
        public int DiveBomberAttack
        {
            get => _diveBomberAttack;
            private set => Set(ref _diveBomberAttack, value, __eventArgs_diveBomberAttack);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiSubmarine = new PropertyChangedEventArgs(nameof(AntiSubmarine));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _antiSubmarine;
        public int AntiSubmarine
        {
            get => _antiSubmarine;
            private set => Set(ref _antiSubmarine, value, __eventArgs_antiSubmarine);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_accuracy = new PropertyChangedEventArgs(nameof(Accuracy));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _accuracy;
        public int Accuracy
        {
            get => _accuracy;
            private set => Set(ref _accuracy, value, __eventArgs_accuracy);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_evasion = new PropertyChangedEventArgs(nameof(Evasion));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _evasion;
        public int Evasion
        {
            get => _evasion;
            private set => Set(ref _evasion, value, __eventArgs_evasion);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiBomber = new PropertyChangedEventArgs(nameof(AntiBomber));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _antiBomber;
        public int AntiBomber
        {
            get => _antiBomber;
            private set => Set(ref _antiBomber, value, __eventArgs_antiBomber);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_interception = new PropertyChangedEventArgs(nameof(Interception));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _interception;
        public int Interception
        {
            get => _interception;
            private set => Set(ref _interception, value, __eventArgs_interception);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_lineOfSight = new PropertyChangedEventArgs(nameof(LineOfSight));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _lineOfSight;
        public int LineOfSight
        {
            get => _lineOfSight;
            private set => Set(ref _lineOfSight, value, __eventArgs_lineOfSight);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fireRange = new PropertyChangedEventArgs(nameof(FireRange));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FireRange _fireRange;
        public FireRange FireRange
        {
            get => _fireRange;
            private set => Set(ref _fireRange, value, __eventArgs_fireRange);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_flightRadius = new PropertyChangedEventArgs(nameof(FlightRadius));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _flightRadius;
        public int FlightRadius
        {
            get => _flightRadius;
            private set => Set(ref _flightRadius, value, __eventArgs_flightRadius);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_deploymentConsumption = new PropertyChangedEventArgs(nameof(DeploymentConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _deploymentConsumption;
        public Materials DeploymentConsumption
        {
            get => _deploymentConsumption;
            private set => Set(ref _deploymentConsumption, value, __eventArgs_deploymentConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_dismantleAcquirement = new PropertyChangedEventArgs(nameof(DismantleAcquirement));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _dismantleAcquirement;
        public Materials DismantleAcquirement
        {
            get => _dismantleAcquirement;
            private set => Set(ref _dismantleAcquirement, value, __eventArgs_dismantleAcquirement);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_rarity = new PropertyChangedEventArgs(nameof(Rarity));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _rarity;
        public int Rarity
        {
            get => _rarity;
            private set => Set(ref _rarity, value, __eventArgs_rarity);
        }

        public int CompareTo(SlotItemInfo other) => Id.CompareTo(other?.Id ?? default);

        public SlotItemInfoId Id { get; }
        private readonly MasterDataRoot _owner;

        public SlotItemInfo(SlotItemInfoId id, MasterDataRoot owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public SlotItemInfo(RawSlotItemInfo raw, MasterDataRoot owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawSlotItemInfo raw)
        {
            Name = raw.Name;
            IconId = raw.IconId;
            PlaneId = raw.PlaneId;
            Firepower = raw.Firepower;
            Torpedo = raw.Torpedo;
            AntiAir = raw.AntiAir;
            Armor = raw.Armor;
            DiveBomberAttack = raw.DiveBomberAttack;
            AntiSubmarine = raw.AntiSubmarine;
            Accuracy = raw.Accuracy;
            Evasion = raw.Evasion;
            AntiBomber = raw.AntiBomber;
            Interception = raw.Interception;
            LineOfSight = raw.LineOfSight;
            FireRange = raw.FireRange;
            FlightRadius = raw.FlightRadius;
            DeploymentConsumption = raw.DeploymentConsumption;
            DismantleAcquirement = raw.DismantleAcquirement;
            Rarity = raw.Rarity;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawSlotItemInfo raw);

        public override string ToString() => $"SlotItemInfo {Id}";
    }

    public sealed partial class UseItemInfo : BindableObject, IComparable<UseItemInfo>, IUpdatable<UseItemId, RawUseItem>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        public int CompareTo(UseItemInfo other) => Id.CompareTo(other?.Id ?? default);

        public UseItemId Id { get; }
        private readonly MasterDataRoot _owner;

        public UseItemInfo(UseItemId id, MasterDataRoot owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public UseItemInfo(RawUseItem raw, MasterDataRoot owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawUseItem raw)
        {
            Name = raw.Name;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawUseItem raw);

        public override string ToString() => $"UseItemInfo {Id}";
    }

    public sealed partial class MapAreaInfo : BindableObject, IComparable<MapAreaInfo>, IUpdatable<MapAreaId, RawMapArea>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isEventArea = new PropertyChangedEventArgs(nameof(IsEventArea));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isEventArea;
        public bool IsEventArea
        {
            get => _isEventArea;
            private set => Set(ref _isEventArea, value, __eventArgs_isEventArea);
        }

        public int CompareTo(MapAreaInfo other) => Id.CompareTo(other?.Id ?? default);

        public MapAreaId Id { get; }
        private readonly MasterDataRoot _owner;

        public MapAreaInfo(MapAreaId id, MasterDataRoot owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public MapAreaInfo(RawMapArea raw, MasterDataRoot owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawMapArea raw)
        {
            Name = raw.Name;
            IsEventArea = raw.IsEventArea;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawMapArea raw);

        public override string ToString() => $"MapAreaInfo {Id}";
    }

    public sealed partial class MapInfo : BindableObject, IComparable<MapInfo>, IUpdatable<MapId, RawMapInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_mapArea = new PropertyChangedEventArgs(nameof(MapArea));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private MapAreaInfo _mapArea;
        public MapAreaInfo MapArea
        {
            get => _mapArea;
            private set => Set(ref _mapArea, value, __eventArgs_mapArea);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_difficulty = new PropertyChangedEventArgs(nameof(Difficulty));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _difficulty;
        public int Difficulty
        {
            get => _difficulty;
            private set => Set(ref _difficulty, value, __eventArgs_difficulty);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_requiredDefeatCount = new PropertyChangedEventArgs(nameof(RequiredDefeatCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _requiredDefeatCount;
        public int? RequiredDefeatCount
        {
            get => _requiredDefeatCount;
            private set => Set(ref _requiredDefeatCount, value, __eventArgs_requiredDefeatCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUseNormalFleet = new PropertyChangedEventArgs(nameof(CanUseNormalFleet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUseNormalFleet;
        public bool CanUseNormalFleet
        {
            get => _canUseNormalFleet;
            private set => Set(ref _canUseNormalFleet, value, __eventArgs_canUseNormalFleet);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUseStrikingForceFleet = new PropertyChangedEventArgs(nameof(CanUseStrikingForceFleet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUseStrikingForceFleet;
        public bool CanUseStrikingForceFleet
        {
            get => _canUseStrikingForceFleet;
            private set => Set(ref _canUseStrikingForceFleet, value, __eventArgs_canUseStrikingForceFleet);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUseCarrierTaskForceFleet = new PropertyChangedEventArgs(nameof(CanUseCarrierTaskForceFleet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUseCarrierTaskForceFleet;
        public bool CanUseCarrierTaskForceFleet
        {
            get => _canUseCarrierTaskForceFleet;
            private set => Set(ref _canUseCarrierTaskForceFleet, value, __eventArgs_canUseCarrierTaskForceFleet);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUseSurfaceTaskForceFleet = new PropertyChangedEventArgs(nameof(CanUseSurfaceTaskForceFleet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUseSurfaceTaskForceFleet;
        public bool CanUseSurfaceTaskForceFleet
        {
            get => _canUseSurfaceTaskForceFleet;
            private set => Set(ref _canUseSurfaceTaskForceFleet, value, __eventArgs_canUseSurfaceTaskForceFleet);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canUseTransportEscortFleet = new PropertyChangedEventArgs(nameof(CanUseTransportEscortFleet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canUseTransportEscortFleet;
        public bool CanUseTransportEscortFleet
        {
            get => _canUseTransportEscortFleet;
            private set => Set(ref _canUseTransportEscortFleet, value, __eventArgs_canUseTransportEscortFleet);
        }

        public int CompareTo(MapInfo other) => Id.CompareTo(other?.Id ?? default);

        public MapId Id { get; }
        private readonly MasterDataRoot _owner;

        public MapInfo(MapId id, MasterDataRoot owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public MapInfo(RawMapInfo raw, MasterDataRoot owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawMapInfo raw)
        {
            Name = raw.Name;
            Difficulty = raw.Difficulty;
            RequiredDefeatCount = raw.RequiredDefeatCount;
            CanUseNormalFleet = raw.CanUseNormalFleet;
            CanUseStrikingForceFleet = raw.CanUseStrikingForceFleet;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawMapInfo raw);

        public override string ToString() => $"MapInfo {Id}";
    }

    public sealed partial class ExpeditionInfo : BindableObject, IComparable<ExpeditionInfo>, IUpdatable<ExpeditionId, RawExpeditionInfo>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_displayId = new PropertyChangedEventArgs(nameof(DisplayId));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _displayId;
        public string DisplayId
        {
            get => _displayId;
            private set => Set(ref _displayId, value, __eventArgs_displayId);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_mapArea = new PropertyChangedEventArgs(nameof(MapArea));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private MapAreaInfo _mapArea;
        public MapAreaInfo MapArea
        {
            get => _mapArea;
            private set => Set(ref _mapArea, value, __eventArgs_mapArea);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_duration = new PropertyChangedEventArgs(nameof(Duration));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TimeSpan _duration;
        public TimeSpan Duration
        {
            get => _duration;
            private set => Set(ref _duration, value, __eventArgs_duration);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_minShipCount = new PropertyChangedEventArgs(nameof(MinShipCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _minShipCount;
        public int MinShipCount
        {
            get => _minShipCount;
            private set => Set(ref _minShipCount, value, __eventArgs_minShipCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_difficulty = new PropertyChangedEventArgs(nameof(Difficulty));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _difficulty;
        public int Difficulty
        {
            get => _difficulty;
            private set => Set(ref _difficulty, value, __eventArgs_difficulty);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fuelConsumptionPercentage = new PropertyChangedEventArgs(nameof(FuelConsumptionPercentage));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double _fuelConsumptionPercentage;
        public double FuelConsumptionPercentage
        {
            get => _fuelConsumptionPercentage;
            private set => Set(ref _fuelConsumptionPercentage, value, __eventArgs_fuelConsumptionPercentage);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_bulletConsumptionPercentage = new PropertyChangedEventArgs(nameof(BulletConsumptionPercentage));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double _bulletConsumptionPercentage;
        public double BulletConsumptionPercentage
        {
            get => _bulletConsumptionPercentage;
            private set => Set(ref _bulletConsumptionPercentage, value, __eventArgs_bulletConsumptionPercentage);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_useItemReward1 = new PropertyChangedEventArgs(nameof(UseItemReward1));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExpeditionUseItemReward? _useItemReward1;
        public ExpeditionUseItemReward? UseItemReward1
        {
            get => _useItemReward1;
            private set => Set(ref _useItemReward1, value, __eventArgs_useItemReward1);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_useItemReward2 = new PropertyChangedEventArgs(nameof(UseItemReward2));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExpeditionUseItemReward? _useItemReward2;
        public ExpeditionUseItemReward? UseItemReward2
        {
            get => _useItemReward2;
            private set => Set(ref _useItemReward2, value, __eventArgs_useItemReward2);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canRecall = new PropertyChangedEventArgs(nameof(CanRecall));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canRecall;
        public bool CanRecall
        {
            get => _canRecall;
            private set => Set(ref _canRecall, value, __eventArgs_canRecall);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_materialRewardLevel = new PropertyChangedEventArgs(nameof(MaterialRewardLevel));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _materialRewardLevel;
        public Materials MaterialRewardLevel
        {
            get => _materialRewardLevel;
            private set => Set(ref _materialRewardLevel, value, __eventArgs_materialRewardLevel);
        }

        public int CompareTo(ExpeditionInfo other) => Id.CompareTo(other?.Id ?? default);

        public ExpeditionId Id { get; }
        private readonly MasterDataRoot _owner;

        public ExpeditionInfo(ExpeditionId id, MasterDataRoot owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public ExpeditionInfo(RawExpeditionInfo raw, MasterDataRoot owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawExpeditionInfo raw)
        {
            DisplayId = raw.DisplayId;
            Name = raw.Name;
            Duration = raw.Duration;
            MinShipCount = raw.MinShipCount;
            Difficulty = raw.Difficulty;
            FuelConsumptionPercentage = raw.FuelConsumptionPercentage;
            BulletConsumptionPercentage = raw.BulletConsumptionPercentage;
            UseItemReward1 = raw.UseItemReward1;
            UseItemReward2 = raw.UseItemReward2;
            CanRecall = raw.CanRecall;
            MaterialRewardLevel = raw.MaterialRewardLevel;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawExpeditionInfo raw);

        public override string ToString() => $"ExpeditionInfo {Id}";
    }

}
