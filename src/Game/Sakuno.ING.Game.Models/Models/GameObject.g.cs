//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Sakuno.ING.Game.Models.MasterData;

namespace Sakuno.ING.Game.Models
{
    public partial class Equipment : Calculated<EquipmentId, RawEquipment>
    {
        public Equipment(EquipmentId id, NavalBase owner) : base(id)
        {
            this.owner = owner;
            CreateDummy();
        }

        public Equipment(RawEquipment raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly NavalBase owner;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__info = new System.ComponentModel.PropertyChangedEventArgs(nameof(Info));
        private EquipmentInfo _info;
        public EquipmentInfo Info
        {
            get => _info;
            internal set => Set(ref _info, value, __eventArgs__info);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__isLocked = new System.ComponentModel.PropertyChangedEventArgs(nameof(IsLocked));
        private bool _isLocked;
        public bool IsLocked
        {
            get => _isLocked;
            internal set => Set(ref _isLocked, value, __eventArgs__isLocked);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__improvementLevel = new System.ComponentModel.PropertyChangedEventArgs(nameof(ImprovementLevel));
        private int _improvementLevel;
        public int ImprovementLevel
        {
            get => _improvementLevel;
            internal set => Set(ref _improvementLevel, value, __eventArgs__improvementLevel);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__airProficiency = new System.ComponentModel.PropertyChangedEventArgs(nameof(AirProficiency));
        private int _airProficiency;
        public int AirProficiency
        {
            get => _airProficiency;
            internal set => Set(ref _airProficiency, value, __eventArgs__airProficiency);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__isAvailable = new System.ComponentModel.PropertyChangedEventArgs(nameof(IsAvailable));
        private bool _isAvailable;
        public bool IsAvailable
        {
            get => _isAvailable;
            internal set => Set(ref _isAvailable, value, __eventArgs__isAvailable);
        }

        public event Action<Equipment, RawEquipment, DateTimeOffset> Updating;
        public override void Update(RawEquipment raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawEquipment raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            IsLocked = raw.IsLocked;
            ImprovementLevel = raw.ImprovementLevel;
            AirProficiency = raw.AirProficiency;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawEquipment raw, DateTimeOffset timeStamp);
        partial void CreateDummy();
    }
    public partial class BuildingDock : Calculated<BuildingDockId, RawBuildingDock>
    {
        public BuildingDock(BuildingDockId id, NavalBase owner) : base(id)
        {
            this.owner = owner;
            CreateDummy();
        }

        public BuildingDock(RawBuildingDock raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly NavalBase owner;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__completionTime = new System.ComponentModel.PropertyChangedEventArgs(nameof(CompletionTime));
        private DateTimeOffset? _completionTime;
        public DateTimeOffset? CompletionTime
        {
            get => _completionTime;
            internal set => Set(ref _completionTime, value, __eventArgs__completionTime);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__state = new System.ComponentModel.PropertyChangedEventArgs(nameof(State));
        private BuildingDockState _state;
        public BuildingDockState State
        {
            get => _state;
            internal set => Set(ref _state, value, __eventArgs__state);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__consumption = new System.ComponentModel.PropertyChangedEventArgs(nameof(Consumption));
        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            internal set => Set(ref _consumption, value, __eventArgs__consumption);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__builtShip = new System.ComponentModel.PropertyChangedEventArgs(nameof(BuiltShip));
        private ShipInfo _builtShip;
        public ShipInfo BuiltShip
        {
            get => _builtShip;
            internal set => Set(ref _builtShip, value, __eventArgs__builtShip);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__isLSC = new System.ComponentModel.PropertyChangedEventArgs(nameof(IsLSC));
        private bool _isLSC;
        public bool IsLSC
        {
            get => _isLSC;
            internal set => Set(ref _isLSC, value, __eventArgs__isLSC);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__timeRemaining = new System.ComponentModel.PropertyChangedEventArgs(nameof(TimeRemaining));
        private TimeSpan? _timeRemaining;
        public TimeSpan? TimeRemaining
        {
            get => _timeRemaining;
            internal set => Set(ref _timeRemaining, value, __eventArgs__timeRemaining);
        }

        public event Action<BuildingDock, RawBuildingDock, DateTimeOffset> Updating;
        public override void Update(RawBuildingDock raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawBuildingDock raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            CompletionTime = raw.CompletionTime;
            State = raw.State;
            Consumption = raw.Consumption;
            IsLSC = raw.IsLSC;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawBuildingDock raw, DateTimeOffset timeStamp);
        partial void CreateDummy();
    }
    public partial class RepairingDock : Calculated<RepairingDockId, RawRepairingDock>
    {
        public RepairingDock(RepairingDockId id, NavalBase owner) : base(id)
        {
            this.owner = owner;
            CreateDummy();
        }

        public RepairingDock(RawRepairingDock raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly NavalBase owner;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__state = new System.ComponentModel.PropertyChangedEventArgs(nameof(State));
        private RepairingDockState _state;
        public RepairingDockState State
        {
            get => _state;
            internal set => Set(ref _state, value, __eventArgs__state);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__completionTime = new System.ComponentModel.PropertyChangedEventArgs(nameof(CompletionTime));
        private DateTimeOffset? _completionTime;
        public DateTimeOffset? CompletionTime
        {
            get => _completionTime;
            internal set => Set(ref _completionTime, value, __eventArgs__completionTime);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__consumption = new System.ComponentModel.PropertyChangedEventArgs(nameof(Consumption));
        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            internal set => Set(ref _consumption, value, __eventArgs__consumption);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__timeRemaining = new System.ComponentModel.PropertyChangedEventArgs(nameof(TimeRemaining));
        private TimeSpan? _timeRemaining;
        public TimeSpan? TimeRemaining
        {
            get => _timeRemaining;
            internal set => Set(ref _timeRemaining, value, __eventArgs__timeRemaining);
        }

        public event Action<RepairingDock, RawRepairingDock, DateTimeOffset> Updating;
        public override void Update(RawRepairingDock raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawRepairingDock raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            State = raw.State;
            CompletionTime = raw.CompletionTime;
            Consumption = raw.Consumption;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawRepairingDock raw, DateTimeOffset timeStamp);
        partial void CreateDummy();
    }
    public partial class UseItemCount : Calculated<UseItemId, RawUseItemCount>
    {
        public UseItemCount(UseItemId id, NavalBase owner) : base(id)
        {
            this.owner = owner;
            CreateDummy();
        }

        public UseItemCount(RawUseItemCount raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly NavalBase owner;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__item = new System.ComponentModel.PropertyChangedEventArgs(nameof(Item));
        private UseItemInfo _item;
        public UseItemInfo Item
        {
            get => _item;
            internal set => Set(ref _item, value, __eventArgs__item);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__count = new System.ComponentModel.PropertyChangedEventArgs(nameof(Count));
        private int _count;
        public int Count
        {
            get => _count;
            internal set => Set(ref _count, value, __eventArgs__count);
        }

        public event Action<UseItemCount, RawUseItemCount, DateTimeOffset> Updating;
        public override void Update(RawUseItemCount raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawUseItemCount raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            Count = raw.Count;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawUseItemCount raw, DateTimeOffset timeStamp);
        partial void CreateDummy();
    }
    public partial class Admiral : Calculated<int, RawAdmiral>
    {
        public Admiral(int id, NavalBase owner) : base(id)
        {
            this.owner = owner;
            CreateDummy();
        }

        public Admiral(RawAdmiral raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly NavalBase owner;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__name = new System.ComponentModel.PropertyChangedEventArgs(nameof(Name));
        private string _name;
        public string Name
        {
            get => _name;
            internal set => Set(ref _name, value, __eventArgs__name);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__leveling = new System.ComponentModel.PropertyChangedEventArgs(nameof(Leveling));
        private Leveling _leveling;
        public Leveling Leveling
        {
            get => _leveling;
            internal set => Set(ref _leveling, value, __eventArgs__leveling);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__rank = new System.ComponentModel.PropertyChangedEventArgs(nameof(Rank));
        private AdmiralRank _rank;
        public AdmiralRank Rank
        {
            get => _rank;
            internal set => Set(ref _rank, value, __eventArgs__rank);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__comment = new System.ComponentModel.PropertyChangedEventArgs(nameof(Comment));
        private string _comment;
        public string Comment
        {
            get => _comment;
            internal set => Set(ref _comment, value, __eventArgs__comment);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__maxShipCount = new System.ComponentModel.PropertyChangedEventArgs(nameof(MaxShipCount));
        private int _maxShipCount;
        public int MaxShipCount
        {
            get => _maxShipCount;
            internal set => Set(ref _maxShipCount, value, __eventArgs__maxShipCount);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__maxEquipmentCount = new System.ComponentModel.PropertyChangedEventArgs(nameof(MaxEquipmentCount));
        private int _maxEquipmentCount;
        public int MaxEquipmentCount
        {
            get => _maxEquipmentCount;
            internal set => Set(ref _maxEquipmentCount, value, __eventArgs__maxEquipmentCount);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__battleStat = new System.ComponentModel.PropertyChangedEventArgs(nameof(BattleStat));
        private BattleStat _battleStat;
        public BattleStat BattleStat
        {
            get => _battleStat;
            internal set => Set(ref _battleStat, value, __eventArgs__battleStat);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__practiceStat = new System.ComponentModel.PropertyChangedEventArgs(nameof(PracticeStat));
        private BattleStat _practiceStat;
        public BattleStat PracticeStat
        {
            get => _practiceStat;
            internal set => Set(ref _practiceStat, value, __eventArgs__practiceStat);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__expeditionStat = new System.ComponentModel.PropertyChangedEventArgs(nameof(ExpeditionStat));
        private ExpeditionStat _expeditionStat;
        public ExpeditionStat ExpeditionStat
        {
            get => _expeditionStat;
            internal set => Set(ref _expeditionStat, value, __eventArgs__expeditionStat);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__canLSC = new System.ComponentModel.PropertyChangedEventArgs(nameof(CanLSC));
        private bool _canLSC;
        public bool CanLSC
        {
            get => _canLSC;
            internal set => Set(ref _canLSC, value, __eventArgs__canLSC);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__maxMaterial = new System.ComponentModel.PropertyChangedEventArgs(nameof(MaxMaterial));
        private int _maxMaterial;
        public int MaxMaterial
        {
            get => _maxMaterial;
            internal set => Set(ref _maxMaterial, value, __eventArgs__maxMaterial);
        }

        public event Action<Admiral, RawAdmiral, DateTimeOffset> Updating;
        public override void Update(RawAdmiral raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawAdmiral raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            Name = raw.Name;
            Leveling = raw.Leveling;
            Rank = raw.Rank;
            Comment = raw.Comment;
            MaxShipCount = raw.MaxShipCount;
            MaxEquipmentCount = raw.MaxEquipmentCount;
            BattleStat = raw.BattleStat;
            PracticeStat = raw.PracticeStat;
            ExpeditionStat = raw.ExpeditionStat;
            CanLSC = raw.CanLSC;
            MaxMaterial = raw.MaxMaterial;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawAdmiral raw, DateTimeOffset timeStamp);
        partial void CreateDummy();
    }
    public partial class Ship : Calculated<ShipId, RawShip>
    {
        public Ship(ShipId id, NavalBase owner) : base(id)
        {
            this.owner = owner;
            CreateDummy();
        }

        public Ship(RawShip raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly NavalBase owner;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__info = new System.ComponentModel.PropertyChangedEventArgs(nameof(Info));
        private ShipInfo _info;
        public ShipInfo Info
        {
            get => _info;
            internal set => Set(ref _info, value, __eventArgs__info);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__leveling = new System.ComponentModel.PropertyChangedEventArgs(nameof(Leveling));
        private Leveling _leveling;
        public Leveling Leveling
        {
            get => _leveling;
            internal set => Set(ref _leveling, value, __eventArgs__leveling);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__hP = new System.ComponentModel.PropertyChangedEventArgs(nameof(HP));
        private ShipHP _hP;
        public ShipHP HP
        {
            get => _hP;
            internal set => Set(ref _hP, value, __eventArgs__hP);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__speed = new System.ComponentModel.PropertyChangedEventArgs(nameof(Speed));
        private ShipSpeed _speed;
        public ShipSpeed Speed
        {
            get => _speed;
            internal set => Set(ref _speed, value, __eventArgs__speed);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__fireRange = new System.ComponentModel.PropertyChangedEventArgs(nameof(FireRange));
        private FireRange _fireRange;
        public FireRange FireRange
        {
            get => _fireRange;
            internal set => Set(ref _fireRange, value, __eventArgs__fireRange);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__slotCount = new System.ComponentModel.PropertyChangedEventArgs(nameof(SlotCount));
        private int _slotCount;
        public int SlotCount
        {
            get => _slotCount;
            internal set => Set(ref _slotCount, value, __eventArgs__slotCount);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__extraSlot = new System.ComponentModel.PropertyChangedEventArgs(nameof(ExtraSlot));
        private Slot _extraSlot;
        public Slot ExtraSlot
        {
            get => _extraSlot;
            internal set => Set(ref _extraSlot, value, __eventArgs__extraSlot);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__fuel = new System.ComponentModel.PropertyChangedEventArgs(nameof(Fuel));
        private ClampedValue _fuel;
        public ClampedValue Fuel
        {
            get => _fuel;
            internal set => Set(ref _fuel, value, __eventArgs__fuel);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__bullet = new System.ComponentModel.PropertyChangedEventArgs(nameof(Bullet));
        private ClampedValue _bullet;
        public ClampedValue Bullet
        {
            get => _bullet;
            internal set => Set(ref _bullet, value, __eventArgs__bullet);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__repairingTime = new System.ComponentModel.PropertyChangedEventArgs(nameof(RepairingTime));
        private TimeSpan _repairingTime;
        public TimeSpan RepairingTime
        {
            get => _repairingTime;
            internal set => Set(ref _repairingTime, value, __eventArgs__repairingTime);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__repairingCost = new System.ComponentModel.PropertyChangedEventArgs(nameof(RepairingCost));
        private Materials _repairingCost;
        public Materials RepairingCost
        {
            get => _repairingCost;
            internal set => Set(ref _repairingCost, value, __eventArgs__repairingCost);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__morale = new System.ComponentModel.PropertyChangedEventArgs(nameof(Morale));
        private int _morale;
        public int Morale
        {
            get => _morale;
            internal set => Set(ref _morale, value, __eventArgs__morale);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__firepower = new System.ComponentModel.PropertyChangedEventArgs(nameof(Firepower));
        private ShipMordenizationStatus _firepower;
        public ShipMordenizationStatus Firepower
        {
            get => _firepower;
            internal set => Set(ref _firepower, value, __eventArgs__firepower);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__torpedo = new System.ComponentModel.PropertyChangedEventArgs(nameof(Torpedo));
        private ShipMordenizationStatus _torpedo;
        public ShipMordenizationStatus Torpedo
        {
            get => _torpedo;
            internal set => Set(ref _torpedo, value, __eventArgs__torpedo);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__antiAir = new System.ComponentModel.PropertyChangedEventArgs(nameof(AntiAir));
        private ShipMordenizationStatus _antiAir;
        public ShipMordenizationStatus AntiAir
        {
            get => _antiAir;
            internal set => Set(ref _antiAir, value, __eventArgs__antiAir);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__armor = new System.ComponentModel.PropertyChangedEventArgs(nameof(Armor));
        private ShipMordenizationStatus _armor;
        public ShipMordenizationStatus Armor
        {
            get => _armor;
            internal set => Set(ref _armor, value, __eventArgs__armor);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__evasion = new System.ComponentModel.PropertyChangedEventArgs(nameof(Evasion));
        private ShipMordenizationStatus _evasion;
        public ShipMordenizationStatus Evasion
        {
            get => _evasion;
            internal set => Set(ref _evasion, value, __eventArgs__evasion);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__antiSubmarine = new System.ComponentModel.PropertyChangedEventArgs(nameof(AntiSubmarine));
        private ShipMordenizationStatus _antiSubmarine;
        public ShipMordenizationStatus AntiSubmarine
        {
            get => _antiSubmarine;
            internal set => Set(ref _antiSubmarine, value, __eventArgs__antiSubmarine);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__lineOfSight = new System.ComponentModel.PropertyChangedEventArgs(nameof(LineOfSight));
        private ShipMordenizationStatus _lineOfSight;
        public ShipMordenizationStatus LineOfSight
        {
            get => _lineOfSight;
            internal set => Set(ref _lineOfSight, value, __eventArgs__lineOfSight);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__luck = new System.ComponentModel.PropertyChangedEventArgs(nameof(Luck));
        private ShipMordenizationStatus _luck;
        public ShipMordenizationStatus Luck
        {
            get => _luck;
            internal set => Set(ref _luck, value, __eventArgs__luck);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__isLocked = new System.ComponentModel.PropertyChangedEventArgs(nameof(IsLocked));
        private bool _isLocked;
        public bool IsLocked
        {
            get => _isLocked;
            internal set => Set(ref _isLocked, value, __eventArgs__isLocked);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__shipLockingTag = new System.ComponentModel.PropertyChangedEventArgs(nameof(ShipLockingTag));
        private int? _shipLockingTag;
        public int? ShipLockingTag
        {
            get => _shipLockingTag;
            internal set => Set(ref _shipLockingTag, value, __eventArgs__shipLockingTag);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__isRepairing = new System.ComponentModel.PropertyChangedEventArgs(nameof(IsRepairing));
        private bool _isRepairing;
        public bool IsRepairing
        {
            get => _isRepairing;
            internal set => Set(ref _isRepairing, value, __eventArgs__isRepairing);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__supplyingCost = new System.ComponentModel.PropertyChangedEventArgs(nameof(SupplyingCost));
        private Materials _supplyingCost;
        public Materials SupplyingCost
        {
            get => _supplyingCost;
            internal set => Set(ref _supplyingCost, value, __eventArgs__supplyingCost);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__fleet = new System.ComponentModel.PropertyChangedEventArgs(nameof(Fleet));
        private Fleet _fleet;
        public Fleet Fleet
        {
            get => _fleet;
            internal set => Set(ref _fleet, value, __eventArgs__fleet);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__airFightPower = new System.ComponentModel.PropertyChangedEventArgs(nameof(AirFightPower));
        private AirFightPower _airFightPower;
        public AirFightPower AirFightPower
        {
            get => _airFightPower;
            internal set => Set(ref _airFightPower, value, __eventArgs__airFightPower);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__effectiveLoS = new System.ComponentModel.PropertyChangedEventArgs(nameof(EffectiveLoS));
        private LineOfSight _effectiveLoS;
        public LineOfSight EffectiveLoS
        {
            get => _effectiveLoS;
            internal set => Set(ref _effectiveLoS, value, __eventArgs__effectiveLoS);
        }

        public event Action<Ship, RawShip, DateTimeOffset> Updating;
        public override void Update(RawShip raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawShip raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            Leveling = raw.Leveling;
            HP = raw.HP;
            Speed = raw.Speed;
            FireRange = raw.FireRange;
            RepairingTime = raw.RepairingTime;
            RepairingCost = raw.RepairingCost;
            Morale = raw.Morale;
            IsLocked = raw.IsLocked;
            ShipLockingTag = raw.ShipLockingTag;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawShip raw, DateTimeOffset timeStamp);
        partial void CreateDummy();
    }
    public partial class Fleet : Calculated<FleetId, RawFleet>
    {
        public Fleet(FleetId id, NavalBase owner) : base(id)
        {
            this.owner = owner;
            CreateDummy();
        }

        public Fleet(RawFleet raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly NavalBase owner;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__name = new System.ComponentModel.PropertyChangedEventArgs(nameof(Name));
        private string _name;
        public string Name
        {
            get => _name;
            internal set => Set(ref _name, value, __eventArgs__name);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__expeditionState = new System.ComponentModel.PropertyChangedEventArgs(nameof(ExpeditionState));
        private FleetExpeditionState _expeditionState;
        public FleetExpeditionState ExpeditionState
        {
            get => _expeditionState;
            internal set => Set(ref _expeditionState, value, __eventArgs__expeditionState);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__expedition = new System.ComponentModel.PropertyChangedEventArgs(nameof(Expedition));
        private ExpeditionInfo _expedition;
        public ExpeditionInfo Expedition
        {
            get => _expedition;
            internal set => Set(ref _expedition, value, __eventArgs__expedition);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__expeditionCompletionTime = new System.ComponentModel.PropertyChangedEventArgs(nameof(ExpeditionCompletionTime));
        private DateTimeOffset? _expeditionCompletionTime;
        public DateTimeOffset? ExpeditionCompletionTime
        {
            get => _expeditionCompletionTime;
            internal set => Set(ref _expeditionCompletionTime, value, __eventArgs__expeditionCompletionTime);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__expeditionTimeRemaining = new System.ComponentModel.PropertyChangedEventArgs(nameof(ExpeditionTimeRemaining));
        private TimeSpan? _expeditionTimeRemaining;
        public TimeSpan? ExpeditionTimeRemaining
        {
            get => _expeditionTimeRemaining;
            internal set => Set(ref _expeditionTimeRemaining, value, __eventArgs__expeditionTimeRemaining);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__slowestShipSpeed = new System.ComponentModel.PropertyChangedEventArgs(nameof(SlowestShipSpeed));
        private ShipSpeed _slowestShipSpeed;
        public ShipSpeed SlowestShipSpeed
        {
            get => _slowestShipSpeed;
            internal set => Set(ref _slowestShipSpeed, value, __eventArgs__slowestShipSpeed);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__supplyingCost = new System.ComponentModel.PropertyChangedEventArgs(nameof(SupplyingCost));
        private Materials _supplyingCost;
        public Materials SupplyingCost
        {
            get => _supplyingCost;
            internal set => Set(ref _supplyingCost, value, __eventArgs__supplyingCost);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__repairingCost = new System.ComponentModel.PropertyChangedEventArgs(nameof(RepairingCost));
        private Materials _repairingCost;
        public Materials RepairingCost
        {
            get => _repairingCost;
            internal set => Set(ref _repairingCost, value, __eventArgs__repairingCost);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__airFightPower = new System.ComponentModel.PropertyChangedEventArgs(nameof(AirFightPower));
        private AirFightPower _airFightPower;
        public AirFightPower AirFightPower
        {
            get => _airFightPower;
            internal set => Set(ref _airFightPower, value, __eventArgs__airFightPower);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__simpleLos = new System.ComponentModel.PropertyChangedEventArgs(nameof(SimpleLos));
        private int _simpleLos;
        public int SimpleLos
        {
            get => _simpleLos;
            internal set => Set(ref _simpleLos, value, __eventArgs__simpleLos);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__effectiveLoS = new System.ComponentModel.PropertyChangedEventArgs(nameof(EffectiveLoS));
        private LineOfSight _effectiveLoS;
        public LineOfSight EffectiveLoS
        {
            get => _effectiveLoS;
            internal set => Set(ref _effectiveLoS, value, __eventArgs__effectiveLoS);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__state = new System.ComponentModel.PropertyChangedEventArgs(nameof(State));
        private FleetState _state;
        public FleetState State
        {
            get => _state;
            internal set => Set(ref _state, value, __eventArgs__state);
        }

        public event Action<Fleet, RawFleet, DateTimeOffset> Updating;
        public override void Update(RawFleet raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawFleet raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            Name = raw.Name;
            ExpeditionState = raw.ExpeditionState;
            ExpeditionCompletionTime = raw.ExpeditionCompletionTime;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawFleet raw, DateTimeOffset timeStamp);
        partial void CreateDummy();
    }
    public partial class Quest : Calculated<QuestId, RawQuest>
    {
        public Quest(QuestId id, QuestManager owner) : base(id)
        {
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("QuestName", id.ToString());
            Description.Translation = owner.Localization?.GetLocalized("QuestDesc", id.ToString());
            CreateDummy();
        }

        public Quest(RawQuest raw, QuestManager owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly QuestManager owner;

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public TextTranslationGroup Description { get; } = new TextTranslationGroup();

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__category = new System.ComponentModel.PropertyChangedEventArgs(nameof(Category));
        private QuestCategoty _category;
        public QuestCategoty Category
        {
            get => _category;
            internal set => Set(ref _category, value, __eventArgs__category);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__period = new System.ComponentModel.PropertyChangedEventArgs(nameof(Period));
        private QuestPeriod _period;
        public QuestPeriod Period
        {
            get => _period;
            internal set => Set(ref _period, value, __eventArgs__period);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__state = new System.ComponentModel.PropertyChangedEventArgs(nameof(State));
        private QuestState _state;
        public QuestState State
        {
            get => _state;
            internal set => Set(ref _state, value, __eventArgs__state);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__progress = new System.ComponentModel.PropertyChangedEventArgs(nameof(Progress));
        private QuestProgress _progress;
        public QuestProgress Progress
        {
            get => _progress;
            internal set => Set(ref _progress, value, __eventArgs__progress);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__rewards = new System.ComponentModel.PropertyChangedEventArgs(nameof(Rewards));
        private Materials _rewards;
        public Materials Rewards
        {
            get => _rewards;
            internal set => Set(ref _rewards, value, __eventArgs__rewards);
        }

        public event Action<Quest, RawQuest, DateTimeOffset> Updating;
        public override void Update(RawQuest raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawQuest raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            if (raw.Description != Description.Origin)
            {
                Description.Origin = raw.Description;
                NotifyPropertyChanged(nameof(Description));
            }

            Category = raw.Category;
            Period = raw.Period;
            State = raw.State;
            Progress = raw.Progress;
            Rewards = raw.Rewards;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawQuest raw, DateTimeOffset timeStamp);
        partial void CreateDummy();

        public override string ToString() => $"Quest {Id}: {Name.Origin}";
    }
    public partial class Map : Calculated<MapId, RawMap>
    {
        public Map(MapId id, NavalBase owner) : base(id)
        {
            this.owner = owner;
            CreateDummy();
        }

        public Map(RawMap raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly NavalBase owner;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__info = new System.ComponentModel.PropertyChangedEventArgs(nameof(Info));
        private MapInfo _info;
        public MapInfo Info
        {
            get => _info;
            internal set => Set(ref _info, value, __eventArgs__info);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__isCleared = new System.ComponentModel.PropertyChangedEventArgs(nameof(IsCleared));
        private bool _isCleared;
        public bool IsCleared
        {
            get => _isCleared;
            internal set => Set(ref _isCleared, value, __eventArgs__isCleared);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__rank = new System.ComponentModel.PropertyChangedEventArgs(nameof(Rank));
        private EventMapRank? _rank;
        public EventMapRank? Rank
        {
            get => _rank;
            internal set => Set(ref _rank, value, __eventArgs__rank);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__gaugeIndex = new System.ComponentModel.PropertyChangedEventArgs(nameof(GaugeIndex));
        private int? _gaugeIndex;
        public int? GaugeIndex
        {
            get => _gaugeIndex;
            internal set => Set(ref _gaugeIndex, value, __eventArgs__gaugeIndex);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__gaugeType = new System.ComponentModel.PropertyChangedEventArgs(nameof(GaugeType));
        private EventMapGaugeType? _gaugeType;
        public EventMapGaugeType? GaugeType
        {
            get => _gaugeType;
            internal set => Set(ref _gaugeType, value, __eventArgs__gaugeType);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__availableAirForceGroups = new System.ComponentModel.PropertyChangedEventArgs(nameof(AvailableAirForceGroups));
        private int _availableAirForceGroups;
        public int AvailableAirForceGroups
        {
            get => _availableAirForceGroups;
            internal set => Set(ref _availableAirForceGroups, value, __eventArgs__availableAirForceGroups);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__gauge = new System.ComponentModel.PropertyChangedEventArgs(nameof(Gauge));
        private ClampedValue _gauge;
        public ClampedValue Gauge
        {
            get => _gauge;
            internal set => Set(ref _gauge, value, __eventArgs__gauge);
        }

        public event Action<Map, RawMap, DateTimeOffset> Updating;
        public override void Update(RawMap raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawMap raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            IsCleared = raw.IsCleared;
            Rank = raw.Rank;
            GaugeIndex = raw.GaugeIndex;
            GaugeType = raw.GaugeType;
            AvailableAirForceGroups = raw.AvailableAirForceGroups;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawMap raw, DateTimeOffset timeStamp);
        partial void CreateDummy();
    }
    public partial class AirForceSquadron : Calculated<int, RawAirForceSquadron>
    {
        public AirForceSquadron(int id, NavalBase owner) : base(id)
        {
            this.owner = owner;
            CreateDummy();
        }

        public AirForceSquadron(RawAirForceSquadron raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly NavalBase owner;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__equipment = new System.ComponentModel.PropertyChangedEventArgs(nameof(Equipment));
        private Equipment _equipment;
        public Equipment Equipment
        {
            get => _equipment;
            internal set => Set(ref _equipment, value, __eventArgs__equipment);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__aircraftCount = new System.ComponentModel.PropertyChangedEventArgs(nameof(AircraftCount));
        private ClampedValue _aircraftCount;
        public ClampedValue AircraftCount
        {
            get => _aircraftCount;
            internal set => Set(ref _aircraftCount, value, __eventArgs__aircraftCount);
        }

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private static readonly System.ComponentModel.PropertyChangedEventArgs __eventArgs__morale = new System.ComponentModel.PropertyChangedEventArgs(nameof(Morale));
        private SquadronMorale _morale;
        public SquadronMorale Morale
        {
            get => _morale;
            internal set => Set(ref _morale, value, __eventArgs__morale);
        }

        public event Action<AirForceSquadron, RawAirForceSquadron, DateTimeOffset> Updating;
        public override void Update(RawAirForceSquadron raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (var scope = EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawAirForceSquadron raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            AircraftCount = raw.AircraftCount;
            Morale = raw.Morale;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawAirForceSquadron raw, DateTimeOffset timeStamp);
        partial void CreateDummy();
    }
}
