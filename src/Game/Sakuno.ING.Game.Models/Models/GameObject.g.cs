//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Sakuno.ING.Game.Models.MasterData;

namespace Sakuno.ING.Game.Models
{
    public abstract partial class Equipment : BindableObject
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_info = new PropertyChangedEventArgs(nameof(Info));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private EquipmentInfo _info;
        public EquipmentInfo Info
        {
            get => _info;
            protected set => Set(ref _info, value, __eventArgs_info);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isLocked = new PropertyChangedEventArgs(nameof(IsLocked));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isLocked;
        public bool IsLocked
        {
            get => _isLocked;
            protected set => Set(ref _isLocked, value, __eventArgs_isLocked);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_improvementLevel = new PropertyChangedEventArgs(nameof(ImprovementLevel));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _improvementLevel;
        public int ImprovementLevel
        {
            get => _improvementLevel;
            protected set => Set(ref _improvementLevel, value, __eventArgs_improvementLevel);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_airProficiency = new PropertyChangedEventArgs(nameof(AirProficiency));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _airProficiency;
        public int AirProficiency
        {
            get => _airProficiency;
            protected set => Set(ref _airProficiency, value, __eventArgs_airProficiency);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isAvailable = new PropertyChangedEventArgs(nameof(IsAvailable));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isAvailable;
        public bool IsAvailable
        {
            get => _isAvailable;
            protected set => Set(ref _isAvailable, value, __eventArgs_isAvailable);
        }
    }
    public sealed partial class HomeportEquipment : Equipment, IComparable<HomeportEquipment>, IUpdatable<EquipmentId, RawEquipment>
    {
        public int CompareTo(HomeportEquipment other) => Id.CompareTo(other?.Id ?? default);

        public EquipmentId Id { get; }
        private readonly NavalBase owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public HomeportEquipment(EquipmentId id, NavalBase owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public HomeportEquipment(RawEquipment raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<HomeportEquipment, RawEquipment, DateTimeOffset> Updating;
        public void Update(RawEquipment raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawEquipment raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            IsLocked = raw.IsLocked;
            ImprovementLevel = raw.ImprovementLevel;
            AirProficiency = raw.AirProficiency;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawEquipment raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"HomeportEquipment {Id}";
    }

    public sealed partial class BuildingDock : BindableObject, IComparable<BuildingDock>, IUpdatable<BuildingDockId, RawBuildingDock>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_state = new PropertyChangedEventArgs(nameof(State));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BuildingDockState _state;
        public BuildingDockState State
        {
            get => _state;
            private set => Set(ref _state, value, __eventArgs_state);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_consumption = new PropertyChangedEventArgs(nameof(Consumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            private set => Set(ref _consumption, value, __eventArgs_consumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_builtShip = new PropertyChangedEventArgs(nameof(BuiltShip));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipInfo _builtShip;
        public ShipInfo BuiltShip
        {
            get => _builtShip;
            private set => Set(ref _builtShip, value, __eventArgs_builtShip);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isLSC = new PropertyChangedEventArgs(nameof(IsLSC));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isLSC;
        public bool IsLSC
        {
            get => _isLSC;
            private set => Set(ref _isLSC, value, __eventArgs_isLSC);
        }

        public int CompareTo(BuildingDock other) => Id.CompareTo(other?.Id ?? default);

        public BuildingDockId Id { get; }
        private readonly NavalBase owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public BuildingDock(BuildingDockId id, NavalBase owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public BuildingDock(RawBuildingDock raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<BuildingDock, RawBuildingDock, DateTimeOffset> Updating;
        public void Update(RawBuildingDock raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawBuildingDock raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            State = raw.State;
            Consumption = raw.Consumption;
            IsLSC = raw.IsLSC;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawBuildingDock raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"BuildingDock {Id}";
    }

    public sealed partial class RepairingDock : BindableObject, IComparable<RepairingDock>, IUpdatable<RepairingDockId, RawRepairingDock>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_state = new PropertyChangedEventArgs(nameof(State));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private RepairingDockState _state;
        public RepairingDockState State
        {
            get => _state;
            private set => Set(ref _state, value, __eventArgs_state);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_consumption = new PropertyChangedEventArgs(nameof(Consumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            private set => Set(ref _consumption, value, __eventArgs_consumption);
        }

        public int CompareTo(RepairingDock other) => Id.CompareTo(other?.Id ?? default);

        public RepairingDockId Id { get; }
        private readonly NavalBase owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public RepairingDock(RepairingDockId id, NavalBase owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public RepairingDock(RawRepairingDock raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<RepairingDock, RawRepairingDock, DateTimeOffset> Updating;
        public void Update(RawRepairingDock raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawRepairingDock raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            State = raw.State;
            Consumption = raw.Consumption;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawRepairingDock raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"RepairingDock {Id}";
    }

    public sealed partial class UseItemCount : BindableObject, IComparable<UseItemCount>, IUpdatable<UseItemId, RawUseItemCount>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_item = new PropertyChangedEventArgs(nameof(Item));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private UseItemInfo _item;
        public UseItemInfo Item
        {
            get => _item;
            private set => Set(ref _item, value, __eventArgs_item);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_count = new PropertyChangedEventArgs(nameof(Count));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _count;
        public int Count
        {
            get => _count;
            private set => Set(ref _count, value, __eventArgs_count);
        }

        public int CompareTo(UseItemCount other) => Id.CompareTo(other?.Id ?? default);

        public UseItemId Id { get; }
        private readonly NavalBase owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public UseItemCount(UseItemId id, NavalBase owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public UseItemCount(RawUseItemCount raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<UseItemCount, RawUseItemCount, DateTimeOffset> Updating;
        public void Update(RawUseItemCount raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawUseItemCount raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            Count = raw.Count;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawUseItemCount raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"UseItemCount {Id}";
    }

    public sealed partial class Admiral : BindableObject, IComparable<Admiral>, IUpdatable<int, RawAdmiral>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_leveling = new PropertyChangedEventArgs(nameof(Leveling));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Leveling _leveling;
        public Leveling Leveling
        {
            get => _leveling;
            private set => Set(ref _leveling, value, __eventArgs_leveling);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_rank = new PropertyChangedEventArgs(nameof(Rank));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AdmiralRank _rank;
        public AdmiralRank Rank
        {
            get => _rank;
            private set => Set(ref _rank, value, __eventArgs_rank);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_comment = new PropertyChangedEventArgs(nameof(Comment));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _comment;
        public string Comment
        {
            get => _comment;
            private set => Set(ref _comment, value, __eventArgs_comment);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_maxShipCount = new PropertyChangedEventArgs(nameof(MaxShipCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _maxShipCount;
        public int MaxShipCount
        {
            get => _maxShipCount;
            private set => Set(ref _maxShipCount, value, __eventArgs_maxShipCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_maxEquipmentCount = new PropertyChangedEventArgs(nameof(MaxEquipmentCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _maxEquipmentCount;
        public int MaxEquipmentCount
        {
            get => _maxEquipmentCount;
            private set => Set(ref _maxEquipmentCount, value, __eventArgs_maxEquipmentCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_battleStat = new PropertyChangedEventArgs(nameof(BattleStat));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BattleStat _battleStat;
        public BattleStat BattleStat
        {
            get => _battleStat;
            private set => Set(ref _battleStat, value, __eventArgs_battleStat);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_exerciseStat = new PropertyChangedEventArgs(nameof(ExerciseStat));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BattleStat _exerciseStat;
        public BattleStat ExerciseStat
        {
            get => _exerciseStat;
            private set => Set(ref _exerciseStat, value, __eventArgs_exerciseStat);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_expeditionStat = new PropertyChangedEventArgs(nameof(ExpeditionStat));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExpeditionStat _expeditionStat;
        public ExpeditionStat ExpeditionStat
        {
            get => _expeditionStat;
            private set => Set(ref _expeditionStat, value, __eventArgs_expeditionStat);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_canLSC = new PropertyChangedEventArgs(nameof(CanLSC));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _canLSC;
        public bool CanLSC
        {
            get => _canLSC;
            private set => Set(ref _canLSC, value, __eventArgs_canLSC);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_maxMaterial = new PropertyChangedEventArgs(nameof(MaxMaterial));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _maxMaterial;
        public int MaxMaterial
        {
            get => _maxMaterial;
            private set => Set(ref _maxMaterial, value, __eventArgs_maxMaterial);
        }

        public int CompareTo(Admiral other) => Id.CompareTo(other?.Id ?? default);

        public int Id { get; }
        private readonly NavalBase owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public Admiral(int id, NavalBase owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public Admiral(RawAdmiral raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<Admiral, RawAdmiral, DateTimeOffset> Updating;
        public void Update(RawAdmiral raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawAdmiral raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            Name = raw.Name;
            Leveling = raw.Leveling;
            Rank = raw.Rank;
            Comment = raw.Comment;
            MaxShipCount = raw.MaxShipCount;
            MaxEquipmentCount = raw.MaxEquipmentCount;
            BattleStat = raw.BattleStat;
            ExerciseStat = raw.ExerciseStat;
            ExpeditionStat = raw.ExpeditionStat;
            CanLSC = raw.CanLSC;
            MaxMaterial = raw.MaxMaterial;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawAdmiral raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"Admiral {Id}";
    }

    public abstract partial class Ship : BindableObject
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_info = new PropertyChangedEventArgs(nameof(Info));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipInfo _info;
        public ShipInfo Info
        {
            get => _info;
            protected set => Set(ref _info, value, __eventArgs_info);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_leveling = new PropertyChangedEventArgs(nameof(Leveling));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Leveling _leveling;
        public Leveling Leveling
        {
            get => _leveling;
            protected set => Set(ref _leveling, value, __eventArgs_leveling);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_hP = new PropertyChangedEventArgs(nameof(HP));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipHP _hP;
        public ShipHP HP
        {
            get => _hP;
            protected set => Set(ref _hP, value, __eventArgs_hP);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_speed = new PropertyChangedEventArgs(nameof(Speed));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipSpeed _speed;
        public ShipSpeed Speed
        {
            get => _speed;
            protected set => Set(ref _speed, value, __eventArgs_speed);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fireRange = new PropertyChangedEventArgs(nameof(FireRange));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FireRange _fireRange;
        public FireRange FireRange
        {
            get => _fireRange;
            protected set => Set(ref _fireRange, value, __eventArgs_fireRange);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_slotCount = new PropertyChangedEventArgs(nameof(SlotCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _slotCount;
        public int SlotCount
        {
            get => _slotCount;
            protected set => Set(ref _slotCount, value, __eventArgs_slotCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fuel = new PropertyChangedEventArgs(nameof(Fuel));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ClampedValue _fuel;
        public ClampedValue Fuel
        {
            get => _fuel;
            protected set => Set(ref _fuel, value, __eventArgs_fuel);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_bullet = new PropertyChangedEventArgs(nameof(Bullet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ClampedValue _bullet;
        public ClampedValue Bullet
        {
            get => _bullet;
            protected set => Set(ref _bullet, value, __eventArgs_bullet);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_repairingTime = new PropertyChangedEventArgs(nameof(RepairingTime));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TimeSpan _repairingTime;
        public TimeSpan RepairingTime
        {
            get => _repairingTime;
            protected set => Set(ref _repairingTime, value, __eventArgs_repairingTime);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_repairingCost = new PropertyChangedEventArgs(nameof(RepairingCost));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _repairingCost;
        public Materials RepairingCost
        {
            get => _repairingCost;
            protected set => Set(ref _repairingCost, value, __eventArgs_repairingCost);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_morale = new PropertyChangedEventArgs(nameof(Morale));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _morale;
        public int Morale
        {
            get => _morale;
            protected set => Set(ref _morale, value, __eventArgs_morale);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_firepower = new PropertyChangedEventArgs(nameof(Firepower));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _firepower;
        public ShipMordenizationStatus Firepower
        {
            get => _firepower;
            protected set => Set(ref _firepower, value, __eventArgs_firepower);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_torpedo = new PropertyChangedEventArgs(nameof(Torpedo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _torpedo;
        public ShipMordenizationStatus Torpedo
        {
            get => _torpedo;
            protected set => Set(ref _torpedo, value, __eventArgs_torpedo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiAir = new PropertyChangedEventArgs(nameof(AntiAir));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _antiAir;
        public ShipMordenizationStatus AntiAir
        {
            get => _antiAir;
            protected set => Set(ref _antiAir, value, __eventArgs_antiAir);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_armor = new PropertyChangedEventArgs(nameof(Armor));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _armor;
        public ShipMordenizationStatus Armor
        {
            get => _armor;
            protected set => Set(ref _armor, value, __eventArgs_armor);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_evasion = new PropertyChangedEventArgs(nameof(Evasion));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _evasion;
        public ShipMordenizationStatus Evasion
        {
            get => _evasion;
            protected set => Set(ref _evasion, value, __eventArgs_evasion);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiSubmarine = new PropertyChangedEventArgs(nameof(AntiSubmarine));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _antiSubmarine;
        public ShipMordenizationStatus AntiSubmarine
        {
            get => _antiSubmarine;
            protected set => Set(ref _antiSubmarine, value, __eventArgs_antiSubmarine);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_lineOfSight = new PropertyChangedEventArgs(nameof(LineOfSight));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _lineOfSight;
        public ShipMordenizationStatus LineOfSight
        {
            get => _lineOfSight;
            protected set => Set(ref _lineOfSight, value, __eventArgs_lineOfSight);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_luck = new PropertyChangedEventArgs(nameof(Luck));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipMordenizationStatus _luck;
        public ShipMordenizationStatus Luck
        {
            get => _luck;
            protected set => Set(ref _luck, value, __eventArgs_luck);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isLocked = new PropertyChangedEventArgs(nameof(IsLocked));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isLocked;
        public bool IsLocked
        {
            get => _isLocked;
            protected set => Set(ref _isLocked, value, __eventArgs_isLocked);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_shipLockingTag = new PropertyChangedEventArgs(nameof(ShipLockingTag));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _shipLockingTag;
        public int? ShipLockingTag
        {
            get => _shipLockingTag;
            protected set => Set(ref _shipLockingTag, value, __eventArgs_shipLockingTag);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_supplyingCost = new PropertyChangedEventArgs(nameof(SupplyingCost));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _supplyingCost;
        public Materials SupplyingCost
        {
            get => _supplyingCost;
            private set => Set(ref _supplyingCost, value, __eventArgs_supplyingCost);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_airFightPower = new PropertyChangedEventArgs(nameof(AirFightPower));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AirFightPower _airFightPower;
        public AirFightPower AirFightPower
        {
            get => _airFightPower;
            private set => Set(ref _airFightPower, value, __eventArgs_airFightPower);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_effectiveLoS = new PropertyChangedEventArgs(nameof(EffectiveLoS));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private LineOfSight _effectiveLoS;
        public LineOfSight EffectiveLoS
        {
            get => _effectiveLoS;
            private set => Set(ref _effectiveLoS, value, __eventArgs_effectiveLoS);
        }
    }
    public sealed partial class HomeportShip : Ship, IComparable<HomeportShip>, IUpdatable<ShipId, RawShip>
    {
        public int CompareTo(HomeportShip other) => Id.CompareTo(other?.Id ?? default);

        public ShipId Id { get; }
        private readonly NavalBase owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public HomeportShip(ShipId id, NavalBase owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public HomeportShip(RawShip raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<HomeportShip, RawShip, DateTimeOffset> Updating;
        public void Update(RawShip raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawShip raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            Leveling = raw.Leveling;
            HP = raw.HP;
            Speed = raw.Speed;
            FireRange = raw.FireRange;
            RepairingTime = raw.RepairingTime;
            RepairingCost = raw.RepairingCost;
            Morale = raw.Morale;
            IsLocked = raw.IsLocked;
            ShipLockingTag = raw.ShipLockingTag;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawShip raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"HomeportShip {Id}";
    }

    public abstract partial class Fleet : BindableObject
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            protected set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_expeditionState = new PropertyChangedEventArgs(nameof(ExpeditionState));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FleetExpeditionState _expeditionState;
        public FleetExpeditionState ExpeditionState
        {
            get => _expeditionState;
            protected set => Set(ref _expeditionState, value, __eventArgs_expeditionState);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_expedition = new PropertyChangedEventArgs(nameof(Expedition));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExpeditionInfo _expedition;
        public ExpeditionInfo Expedition
        {
            get => _expedition;
            protected set => Set(ref _expedition, value, __eventArgs_expedition);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_slowestShipSpeed = new PropertyChangedEventArgs(nameof(SlowestShipSpeed));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipSpeed _slowestShipSpeed;
        public ShipSpeed SlowestShipSpeed
        {
            get => _slowestShipSpeed;
            protected set => Set(ref _slowestShipSpeed, value, __eventArgs_slowestShipSpeed);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_supplyingCost = new PropertyChangedEventArgs(nameof(SupplyingCost));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _supplyingCost;
        public Materials SupplyingCost
        {
            get => _supplyingCost;
            protected set => Set(ref _supplyingCost, value, __eventArgs_supplyingCost);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_repairingCost = new PropertyChangedEventArgs(nameof(RepairingCost));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _repairingCost;
        public Materials RepairingCost
        {
            get => _repairingCost;
            protected set => Set(ref _repairingCost, value, __eventArgs_repairingCost);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_airFightPower = new PropertyChangedEventArgs(nameof(AirFightPower));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AirFightPower _airFightPower;
        public AirFightPower AirFightPower
        {
            get => _airFightPower;
            protected set => Set(ref _airFightPower, value, __eventArgs_airFightPower);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_simpleLoS = new PropertyChangedEventArgs(nameof(SimpleLoS));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _simpleLoS;
        public int SimpleLoS
        {
            get => _simpleLoS;
            protected set => Set(ref _simpleLoS, value, __eventArgs_simpleLoS);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_effectiveLoS = new PropertyChangedEventArgs(nameof(EffectiveLoS));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private LineOfSight _effectiveLoS;
        public LineOfSight EffectiveLoS
        {
            get => _effectiveLoS;
            protected set => Set(ref _effectiveLoS, value, __eventArgs_effectiveLoS);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_state = new PropertyChangedEventArgs(nameof(State));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FleetState _state;
        public FleetState State
        {
            get => _state;
            protected set => Set(ref _state, value, __eventArgs_state);
        }
    }
    public sealed partial class HomeportFleet : Fleet, IComparable<HomeportFleet>, IUpdatable<FleetId, RawFleet>
    {
        public int CompareTo(HomeportFleet other) => Id.CompareTo(other?.Id ?? default);

        public FleetId Id { get; }
        private readonly NavalBase owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public HomeportFleet(FleetId id, NavalBase owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public HomeportFleet(RawFleet raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<HomeportFleet, RawFleet, DateTimeOffset> Updating;
        public void Update(RawFleet raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawFleet raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            Name = raw.Name;
            ExpeditionState = raw.ExpeditionState;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawFleet raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"HomeportFleet {Id}";
    }

    public sealed partial class Quest : BindableObject, IComparable<Quest>, IUpdatable<QuestId, RawQuest>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_category = new PropertyChangedEventArgs(nameof(Category));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private QuestCategoty _category;
        public QuestCategoty Category
        {
            get => _category;
            private set => Set(ref _category, value, __eventArgs_category);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_period = new PropertyChangedEventArgs(nameof(Period));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private QuestPeriod _period;
        public QuestPeriod Period
        {
            get => _period;
            private set => Set(ref _period, value, __eventArgs_period);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_state = new PropertyChangedEventArgs(nameof(State));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private QuestState _state;
        public QuestState State
        {
            get => _state;
            private set => Set(ref _state, value, __eventArgs_state);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_progress = new PropertyChangedEventArgs(nameof(Progress));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private QuestProgress _progress;
        public QuestProgress Progress
        {
            get => _progress;
            private set => Set(ref _progress, value, __eventArgs_progress);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_rewards = new PropertyChangedEventArgs(nameof(Rewards));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _rewards;
        public Materials Rewards
        {
            get => _rewards;
            private set => Set(ref _rewards, value, __eventArgs_rewards);
        }

        public int CompareTo(Quest other) => Id.CompareTo(other?.Id ?? default);

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TextTranslationDescriptor _name;
        public TextTranslationDescriptor Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_description = new PropertyChangedEventArgs(nameof(Description));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TextTranslationDescriptor _description;
        public TextTranslationDescriptor Description
        {
            get => _description;
            private set => Set(ref _description, value, __eventArgs_description);
        }

        public QuestId Id { get; }
        private readonly QuestManager owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public Quest(QuestId id, QuestManager owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public Quest(RawQuest raw, QuestManager owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<Quest, RawQuest, DateTimeOffset> Updating;
        public void Update(RawQuest raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawQuest raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name?.Origin)
                Name = new TextTranslationDescriptor(Id, "QuestName", raw.Name, true);

            if (raw.Description != Description?.Origin)
                Description = new TextTranslationDescriptor(Id, "QuestDesc", raw.Description, true);

            Category = raw.Category;
            Period = raw.Period;
            State = raw.State;
            Progress = raw.Progress;
            Rewards = raw.Rewards;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawQuest raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"Quest {Id}: {Name.Origin}";
    }

    public sealed partial class Map : BindableObject, IComparable<Map>, IUpdatable<MapId, RawMap>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_info = new PropertyChangedEventArgs(nameof(Info));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private MapInfo _info;
        public MapInfo Info
        {
            get => _info;
            private set => Set(ref _info, value, __eventArgs_info);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isCleared = new PropertyChangedEventArgs(nameof(IsCleared));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isCleared;
        public bool IsCleared
        {
            get => _isCleared;
            private set => Set(ref _isCleared, value, __eventArgs_isCleared);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_rank = new PropertyChangedEventArgs(nameof(Rank));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private EventMapRank? _rank;
        public EventMapRank? Rank
        {
            get => _rank;
            private set => Set(ref _rank, value, __eventArgs_rank);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_gaugeIndex = new PropertyChangedEventArgs(nameof(GaugeIndex));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _gaugeIndex;
        public int? GaugeIndex
        {
            get => _gaugeIndex;
            private set => Set(ref _gaugeIndex, value, __eventArgs_gaugeIndex);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_gaugeType = new PropertyChangedEventArgs(nameof(GaugeType));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private EventMapGaugeType? _gaugeType;
        public EventMapGaugeType? GaugeType
        {
            get => _gaugeType;
            private set => Set(ref _gaugeType, value, __eventArgs_gaugeType);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_availableAirForceGroups = new PropertyChangedEventArgs(nameof(AvailableAirForceGroups));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _availableAirForceGroups;
        public int AvailableAirForceGroups
        {
            get => _availableAirForceGroups;
            private set => Set(ref _availableAirForceGroups, value, __eventArgs_availableAirForceGroups);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_gauge = new PropertyChangedEventArgs(nameof(Gauge));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ClampedValue? _gauge;
        public ClampedValue? Gauge
        {
            get => _gauge;
            private set => Set(ref _gauge, value, __eventArgs_gauge);
        }

        public int CompareTo(Map other) => Id.CompareTo(other?.Id ?? default);

        public MapId Id { get; }
        private readonly NavalBase owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public Map(MapId id, NavalBase owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public Map(RawMap raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<Map, RawMap, DateTimeOffset> Updating;
        public void Update(RawMap raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawMap raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            IsCleared = raw.IsCleared;
            Rank = raw.Rank;
            GaugeIndex = raw.GaugeIndex;
            GaugeType = raw.GaugeType;
            AvailableAirForceGroups = raw.AvailableAirForceGroups;
            Gauge = raw.Gauge;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawMap raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"Map {Id}";
    }

    public sealed partial class AirForceSquadron : BindableObject, IComparable<AirForceSquadron>, IUpdatable<int, RawAirForceSquadron>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_equipment = new PropertyChangedEventArgs(nameof(Equipment));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Equipment _equipment;
        public Equipment Equipment
        {
            get => _equipment;
            private set => Set(ref _equipment, value, __eventArgs_equipment);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_aircraftCount = new PropertyChangedEventArgs(nameof(AircraftCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ClampedValue _aircraftCount;
        public ClampedValue AircraftCount
        {
            get => _aircraftCount;
            private set => Set(ref _aircraftCount, value, __eventArgs_aircraftCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_morale = new PropertyChangedEventArgs(nameof(Morale));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SquadronMorale _morale;
        public SquadronMorale Morale
        {
            get => _morale;
            private set => Set(ref _morale, value, __eventArgs_morale);
        }

        public int CompareTo(AirForceSquadron other) => Id.CompareTo(other?.Id ?? default);

        public int Id { get; }
        private readonly NavalBase owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public AirForceSquadron(int id, NavalBase owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public AirForceSquadron(RawAirForceSquadron raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<AirForceSquadron, RawAirForceSquadron, DateTimeOffset> Updating;
        public void Update(RawAirForceSquadron raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawAirForceSquadron raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            AircraftCount = raw.AircraftCount;
            Morale = raw.Morale;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawAirForceSquadron raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"AirForceSquadron {Id}";
    }

    public sealed partial class AirForceGroup : BindableObject, IComparable<AirForceGroup>, IUpdatable<(MapAreaId MapArea, AirForceGroupId GroupId), RawAirForceGroup>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_distanceBase = new PropertyChangedEventArgs(nameof(DistanceBase));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _distanceBase;
        public int DistanceBase
        {
            get => _distanceBase;
            private set => Set(ref _distanceBase, value, __eventArgs_distanceBase);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_distanceBonus = new PropertyChangedEventArgs(nameof(DistanceBonus));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _distanceBonus;
        public int DistanceBonus
        {
            get => _distanceBonus;
            private set => Set(ref _distanceBonus, value, __eventArgs_distanceBonus);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_action = new PropertyChangedEventArgs(nameof(Action));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AirForceAction _action;
        public AirForceAction Action
        {
            get => _action;
            internal set => Set(ref _action, value, __eventArgs_action);
        }

        public int CompareTo(AirForceGroup other) => Id.CompareTo(other?.Id ?? default);

        public (MapAreaId MapArea, AirForceGroupId GroupId) Id { get; }
        private readonly NavalBase owner;
        public DateTimeOffset UpdationTime { get; private set; }

        public AirForceGroup((MapAreaId MapArea, AirForceGroupId GroupId) id, NavalBase owner)
        {
            Id = id;
            this.owner = owner;
            CreateCore();
        }

        public AirForceGroup(RawAirForceGroup raw, NavalBase owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        public event Action<AirForceGroup, RawAirForceGroup, DateTimeOffset> Updating;
        public void Update(RawAirForceGroup raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            using (EnterBatchNotifyScope())
                UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(RawAirForceGroup raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            Name = raw.Name;
            DistanceBase = raw.DistanceBase;
            DistanceBonus = raw.DistanceBonus;
            Action = raw.Action;

            UpdateCore(raw, timeStamp);
        }

        partial void UpdateCore(RawAirForceGroup raw, DateTimeOffset timeStamp);

        partial void CreateCore();

        public override string ToString() => $"AirForceGroup {Id}";
    }

}
