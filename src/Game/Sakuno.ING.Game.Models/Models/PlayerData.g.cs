//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using Sakuno.ING.Game.Models.MasterData;

namespace Sakuno.ING.Game.Models
{
    public sealed partial class ConstructionDock : BindableObject, IComparable<ConstructionDock>, IUpdatable<ConstructionDockId, RawConstructionDock>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_state = new PropertyChangedEventArgs(nameof(State));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ConstructionDockState _state;
        public ConstructionDockState State
        {
            get => _state;
            private set => Set(ref _state, value, __eventArgs_state);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_consumption = new PropertyChangedEventArgs(nameof(Consumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            private set => Set(ref _consumption, value, __eventArgs_consumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_builtShip = new PropertyChangedEventArgs(nameof(BuiltShip));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipInfo _builtShip;
        public ShipInfo BuiltShip
        {
            get => _builtShip;
            private set => Set(ref _builtShip, value, __eventArgs_builtShip);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isLSC = new PropertyChangedEventArgs(nameof(IsLSC));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isLSC;
        public bool IsLSC
        {
            get => _isLSC;
            private set => Set(ref _isLSC, value, __eventArgs_isLSC);
        }

        public int CompareTo(ConstructionDock other) => Id.CompareTo(other?.Id ?? default);

        public ConstructionDockId Id { get; }
        private readonly NavalBase _owner;

        public ConstructionDock(ConstructionDockId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public ConstructionDock(RawConstructionDock raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawConstructionDock raw)
        {
            State = raw.State;
            Consumption = raw.Consumption;
            IsLSC = raw.IsLSC;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawConstructionDock raw);

        public override string ToString() => $"ConstructionDock {Id}";
    }

    public sealed partial class RepairDock : BindableObject, IComparable<RepairDock>, IUpdatable<RepairDockId, RawRepairDock>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_state = new PropertyChangedEventArgs(nameof(State));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private RepairDockState _state;
        public RepairDockState State
        {
            get => _state;
            private set => Set(ref _state, value, __eventArgs_state);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_consumption = new PropertyChangedEventArgs(nameof(Consumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            private set => Set(ref _consumption, value, __eventArgs_consumption);
        }

        public int CompareTo(RepairDock other) => Id.CompareTo(other?.Id ?? default);

        public RepairDockId Id { get; }
        private readonly NavalBase _owner;

        public RepairDock(RepairDockId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public RepairDock(RawRepairDock raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawRepairDock raw)
        {
            State = raw.State;
            Consumption = raw.Consumption;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawRepairDock raw);

        public override string ToString() => $"RepairDock {Id}";
    }

    public sealed partial class UseItemCount : BindableObject, IComparable<UseItemCount>, IUpdatable<UseItemId, RawUseItemCount>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_useItem = new PropertyChangedEventArgs(nameof(UseItem));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private UseItemInfo _useItem;
        public UseItemInfo UseItem
        {
            get => _useItem;
            private set => Set(ref _useItem, value, __eventArgs_useItem);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_count = new PropertyChangedEventArgs(nameof(Count));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _count;
        public int Count
        {
            get => _count;
            private set => Set(ref _count, value, __eventArgs_count);
        }

        public int CompareTo(UseItemCount other) => Id.CompareTo(other?.Id ?? default);

        public UseItemId Id { get; }
        private readonly NavalBase _owner;

        public UseItemCount(UseItemId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public UseItemCount(RawUseItemCount raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawUseItemCount raw)
        {
            Count = raw.Count;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawUseItemCount raw);

        public override string ToString() => $"UseItemCount {Id}";
    }

    public abstract partial class SlotItem : BindableObject
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_info = new PropertyChangedEventArgs(nameof(Info));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SlotItemInfo _info;
        public SlotItemInfo Info
        {
            get => _info;
            protected set => Set(ref _info, value, __eventArgs_info);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isLocked = new PropertyChangedEventArgs(nameof(IsLocked));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isLocked;
        public bool IsLocked
        {
            get => _isLocked;
            protected set => Set(ref _isLocked, value, __eventArgs_isLocked);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_improvementLevel = new PropertyChangedEventArgs(nameof(ImprovementLevel));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _improvementLevel;
        public int ImprovementLevel
        {
            get => _improvementLevel;
            protected set => Set(ref _improvementLevel, value, __eventArgs_improvementLevel);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_aerialProficiency = new PropertyChangedEventArgs(nameof(AerialProficiency));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _aerialProficiency;
        public int AerialProficiency
        {
            get => _aerialProficiency;
            protected set => Set(ref _aerialProficiency, value, __eventArgs_aerialProficiency);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isAvailable = new PropertyChangedEventArgs(nameof(IsAvailable));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isAvailable;
        public bool IsAvailable
        {
            get => _isAvailable;
            protected set => Set(ref _isAvailable, value, __eventArgs_isAvailable);
        }
    }
    public sealed partial class PlayerSlotItem : SlotItem, IComparable<PlayerSlotItem>, IUpdatable<SlotItemId, RawSlotItem>
    {
        public int CompareTo(PlayerSlotItem other) => Id.CompareTo(other?.Id ?? default);

        public SlotItemId Id { get; }
        private readonly NavalBase _owner;

        public PlayerSlotItem(SlotItemId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public PlayerSlotItem(RawSlotItem raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawSlotItem raw)
        {
            IsLocked = raw.IsLocked;
            ImprovementLevel = raw.ImprovementLevel;
            AerialProficiency = raw.AerialProficiency;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawSlotItem raw);

        public override string ToString() => $"PlayerSlotItem {Id}";
    }

    public abstract partial class Ship : BindableObject
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_info = new PropertyChangedEventArgs(nameof(Info));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipInfo _info;
        public ShipInfo Info
        {
            get => _info;
            protected set => Set(ref _info, value, __eventArgs_info);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_leveling = new PropertyChangedEventArgs(nameof(Leveling));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Leveling _leveling;
        public Leveling Leveling
        {
            get => _leveling;
            protected set => Set(ref _leveling, value, __eventArgs_leveling);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_hP = new PropertyChangedEventArgs(nameof(HP));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipHP _hP;
        public ShipHP HP
        {
            get => _hP;
            protected set => Set(ref _hP, value, __eventArgs_hP);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_speed = new PropertyChangedEventArgs(nameof(Speed));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipSpeed _speed;
        public ShipSpeed Speed
        {
            get => _speed;
            protected set => Set(ref _speed, value, __eventArgs_speed);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fireRange = new PropertyChangedEventArgs(nameof(FireRange));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FireRange _fireRange;
        public FireRange FireRange
        {
            get => _fireRange;
            protected set => Set(ref _fireRange, value, __eventArgs_fireRange);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_fuel = new PropertyChangedEventArgs(nameof(Fuel));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ClampedValue _fuel;
        public ClampedValue Fuel
        {
            get => _fuel;
            protected set => Set(ref _fuel, value, __eventArgs_fuel);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_bullet = new PropertyChangedEventArgs(nameof(Bullet));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ClampedValue _bullet;
        public ClampedValue Bullet
        {
            get => _bullet;
            protected set => Set(ref _bullet, value, __eventArgs_bullet);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_supplyConsumption = new PropertyChangedEventArgs(nameof(SupplyConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _supplyConsumption;
        public Materials SupplyConsumption
        {
            get => _supplyConsumption;
            private set => Set(ref _supplyConsumption, value, __eventArgs_supplyConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_repairTime = new PropertyChangedEventArgs(nameof(RepairTime));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TimeSpan _repairTime;
        public TimeSpan RepairTime
        {
            get => _repairTime;
            protected set => Set(ref _repairTime, value, __eventArgs_repairTime);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_repairConsumption = new PropertyChangedEventArgs(nameof(RepairConsumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _repairConsumption;
        public Materials RepairConsumption
        {
            get => _repairConsumption;
            protected set => Set(ref _repairConsumption, value, __eventArgs_repairConsumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_morale = new PropertyChangedEventArgs(nameof(Morale));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _morale;
        public int Morale
        {
            get => _morale;
            protected set => Set(ref _morale, value, __eventArgs_morale);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_firepower = new PropertyChangedEventArgs(nameof(Firepower));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _firepower;
        public ShipModernizationStatus Firepower
        {
            get => _firepower;
            protected set => Set(ref _firepower, value, __eventArgs_firepower);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_torpedo = new PropertyChangedEventArgs(nameof(Torpedo));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _torpedo;
        public ShipModernizationStatus Torpedo
        {
            get => _torpedo;
            protected set => Set(ref _torpedo, value, __eventArgs_torpedo);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiAir = new PropertyChangedEventArgs(nameof(AntiAir));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _antiAir;
        public ShipModernizationStatus AntiAir
        {
            get => _antiAir;
            protected set => Set(ref _antiAir, value, __eventArgs_antiAir);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_armor = new PropertyChangedEventArgs(nameof(Armor));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _armor;
        public ShipModernizationStatus Armor
        {
            get => _armor;
            protected set => Set(ref _armor, value, __eventArgs_armor);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_evasion = new PropertyChangedEventArgs(nameof(Evasion));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _evasion;
        public ShipModernizationStatus Evasion
        {
            get => _evasion;
            protected set => Set(ref _evasion, value, __eventArgs_evasion);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_antiSubmarine = new PropertyChangedEventArgs(nameof(AntiSubmarine));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _antiSubmarine;
        public ShipModernizationStatus AntiSubmarine
        {
            get => _antiSubmarine;
            protected set => Set(ref _antiSubmarine, value, __eventArgs_antiSubmarine);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_lineOfSight = new PropertyChangedEventArgs(nameof(LineOfSight));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _lineOfSight;
        public ShipModernizationStatus LineOfSight
        {
            get => _lineOfSight;
            protected set => Set(ref _lineOfSight, value, __eventArgs_lineOfSight);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_luck = new PropertyChangedEventArgs(nameof(Luck));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipModernizationStatus _luck;
        public ShipModernizationStatus Luck
        {
            get => _luck;
            protected set => Set(ref _luck, value, __eventArgs_luck);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isLocked = new PropertyChangedEventArgs(nameof(IsLocked));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isLocked;
        public bool IsLocked
        {
            get => _isLocked;
            protected set => Set(ref _isLocked, value, __eventArgs_isLocked);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_shipLockingTagId = new PropertyChangedEventArgs(nameof(ShipLockingTagId));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _shipLockingTagId;
        public int? ShipLockingTagId
        {
            get => _shipLockingTagId;
            protected set => Set(ref _shipLockingTagId, value, __eventArgs_shipLockingTagId);
        }
    }
    public sealed partial class PlayerShip : Ship, IComparable<PlayerShip>, IUpdatable<ShipId, RawShip>
    {
        public int CompareTo(PlayerShip other) => Id.CompareTo(other?.Id ?? default);

        public ShipId Id { get; }
        private readonly NavalBase _owner;

        public PlayerShip(ShipId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public PlayerShip(RawShip raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawShip raw)
        {
            Leveling = raw.Leveling;
            HP = raw.HP;
            Speed = raw.Speed;
            FireRange = raw.FireRange;
            RepairTime = raw.RepairTime;
            RepairConsumption = raw.RepairConsumption;
            Morale = raw.Morale;
            IsLocked = raw.IsLocked;
            ShipLockingTagId = raw.ShipLockingTagId;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawShip raw);

        public override string ToString() => $"PlayerShip {Id}";
    }

    public abstract partial class Fleet : BindableObject
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            protected set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_expeditionState = new PropertyChangedEventArgs(nameof(ExpeditionState));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FleetExpeditionState _expeditionState;
        public FleetExpeditionState ExpeditionState
        {
            get => _expeditionState;
            protected set => Set(ref _expeditionState, value, __eventArgs_expeditionState);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_expedition = new PropertyChangedEventArgs(nameof(Expedition));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExpeditionInfo _expedition;
        public ExpeditionInfo Expedition
        {
            get => _expedition;
            protected set => Set(ref _expedition, value, __eventArgs_expedition);
        }
    }
    public sealed partial class PlayerFleet : Fleet, IComparable<PlayerFleet>, IUpdatable<FleetId, RawFleet>
    {
        public int CompareTo(PlayerFleet other) => Id.CompareTo(other?.Id ?? default);

        public FleetId Id { get; }
        private readonly NavalBase _owner;

        public PlayerFleet(FleetId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public PlayerFleet(RawFleet raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawFleet raw)
        {
            Name = raw.Name;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawFleet raw);

        public override string ToString() => $"PlayerFleet {Id}";
    }

    public sealed partial class Admiral : BindableObject, IComparable<Admiral>, IUpdatable<int, RawAdmiral>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_name = new PropertyChangedEventArgs(nameof(Name));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;
        public string Name
        {
            get => _name;
            private set => Set(ref _name, value, __eventArgs_name);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_leveling = new PropertyChangedEventArgs(nameof(Leveling));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Leveling _leveling;
        public Leveling Leveling
        {
            get => _leveling;
            private set => Set(ref _leveling, value, __eventArgs_leveling);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_rank = new PropertyChangedEventArgs(nameof(Rank));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AdmiralRank _rank;
        public AdmiralRank Rank
        {
            get => _rank;
            private set => Set(ref _rank, value, __eventArgs_rank);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_maxShipCount = new PropertyChangedEventArgs(nameof(MaxShipCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _maxShipCount;
        public int MaxShipCount
        {
            get => _maxShipCount;
            private set => Set(ref _maxShipCount, value, __eventArgs_maxShipCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_maxEquipmentCount = new PropertyChangedEventArgs(nameof(MaxEquipmentCount));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _maxEquipmentCount;
        public int MaxEquipmentCount
        {
            get => _maxEquipmentCount;
            private set => Set(ref _maxEquipmentCount, value, __eventArgs_maxEquipmentCount);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_maxMaterial = new PropertyChangedEventArgs(nameof(MaxMaterial));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _maxMaterial;
        public int MaxMaterial
        {
            get => _maxMaterial;
            private set => Set(ref _maxMaterial, value, __eventArgs_maxMaterial);
        }

        public int CompareTo(Admiral other) => Id.CompareTo(other?.Id ?? default);

        public int Id { get; }
        private readonly NavalBase _owner;

        public Admiral(int id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public Admiral(RawAdmiral raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawAdmiral raw)
        {
            Name = raw.Name;
            Leveling = raw.Leveling;
            Rank = raw.Rank;
            MaxShipCount = raw.MaxShipCount;
            MaxEquipmentCount = raw.MaxEquipmentCount;
            MaxMaterial = raw.MaxMaterial;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawAdmiral raw);

        public override string ToString() => $"Admiral {Id}";
    }

    public sealed partial class Map : BindableObject, IComparable<Map>, IUpdatable<MapId, RawMap>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_info = new PropertyChangedEventArgs(nameof(Info));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private MapInfo _info;
        public MapInfo Info
        {
            get => _info;
            private set => Set(ref _info, value, __eventArgs_info);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isCleared = new PropertyChangedEventArgs(nameof(IsCleared));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isCleared;
        public bool IsCleared
        {
            get => _isCleared;
            private set => Set(ref _isCleared, value, __eventArgs_isCleared);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_availableAirForceGroups = new PropertyChangedEventArgs(nameof(AvailableAirForceGroups));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _availableAirForceGroups;
        public int AvailableAirForceGroups
        {
            get => _availableAirForceGroups;
            private set => Set(ref _availableAirForceGroups, value, __eventArgs_availableAirForceGroups);
        }

        public int CompareTo(Map other) => Id.CompareTo(other?.Id ?? default);

        public MapId Id { get; }
        private readonly NavalBase _owner;

        public Map(MapId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public Map(RawMap raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawMap raw)
        {
            IsCleared = raw.IsCleared;
            AvailableAirForceGroups = raw.AvailableAirForceGroups;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawMap raw);

        public override string ToString() => $"Map {Id}";
    }

}
