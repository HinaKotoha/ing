//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using Sakuno.ING.Game.Models.MasterData;

namespace Sakuno.ING.Game.Models
{
    public sealed partial class ConstructionDock : BindableObject, IComparable<ConstructionDock>, IUpdatable<ConstructionDockId, RawConstructionDock>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_state = new PropertyChangedEventArgs(nameof(State));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ConstructionDockState _state;
        public ConstructionDockState State
        {
            get => _state;
            private set => Set(ref _state, value, __eventArgs_state);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_consumption = new PropertyChangedEventArgs(nameof(Consumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            private set => Set(ref _consumption, value, __eventArgs_consumption);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_builtShip = new PropertyChangedEventArgs(nameof(BuiltShip));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShipInfo _builtShip;
        public ShipInfo BuiltShip
        {
            get => _builtShip;
            private set => Set(ref _builtShip, value, __eventArgs_builtShip);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isLSC = new PropertyChangedEventArgs(nameof(IsLSC));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isLSC;
        public bool IsLSC
        {
            get => _isLSC;
            private set => Set(ref _isLSC, value, __eventArgs_isLSC);
        }

        public int CompareTo(ConstructionDock other) => Id.CompareTo(other?.Id ?? default);

        public ConstructionDockId Id { get; }
        private readonly NavalBase _owner;

        public ConstructionDock(ConstructionDockId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public ConstructionDock(RawConstructionDock raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawConstructionDock raw)
        {
            State = raw.State;
            Consumption = raw.Consumption;
            IsLSC = raw.IsLSC;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawConstructionDock raw);

        public override string ToString() => $"ConstructionDock {Id}";
    }

    public sealed partial class RepairDock : BindableObject, IComparable<RepairDock>, IUpdatable<RepairDockId, RawRepairDock>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_state = new PropertyChangedEventArgs(nameof(State));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private RepairDockState _state;
        public RepairDockState State
        {
            get => _state;
            private set => Set(ref _state, value, __eventArgs_state);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_consumption = new PropertyChangedEventArgs(nameof(Consumption));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            private set => Set(ref _consumption, value, __eventArgs_consumption);
        }

        public int CompareTo(RepairDock other) => Id.CompareTo(other?.Id ?? default);

        public RepairDockId Id { get; }
        private readonly NavalBase _owner;

        public RepairDock(RepairDockId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public RepairDock(RawRepairDock raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawRepairDock raw)
        {
            State = raw.State;
            Consumption = raw.Consumption;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawRepairDock raw);

        public override string ToString() => $"RepairDock {Id}";
    }

    public sealed partial class UseItemCount : BindableObject, IComparable<UseItemCount>, IUpdatable<UseItemId, RawUseItemCount>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_useItem = new PropertyChangedEventArgs(nameof(UseItem));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private UseItemInfo _useItem;
        public UseItemInfo UseItem
        {
            get => _useItem;
            private set => Set(ref _useItem, value, __eventArgs_useItem);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_count = new PropertyChangedEventArgs(nameof(Count));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _count;
        public int Count
        {
            get => _count;
            private set => Set(ref _count, value, __eventArgs_count);
        }

        public int CompareTo(UseItemCount other) => Id.CompareTo(other?.Id ?? default);

        public UseItemId Id { get; }
        private readonly NavalBase _owner;

        public UseItemCount(UseItemId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public UseItemCount(RawUseItemCount raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawUseItemCount raw)
        {
            Count = raw.Count;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawUseItemCount raw);

        public override string ToString() => $"UseItemCount {Id}";
    }

    public abstract partial class SlotItem : BindableObject
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_info = new PropertyChangedEventArgs(nameof(Info));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SlotItemInfo _info;
        public SlotItemInfo Info
        {
            get => _info;
            protected set => Set(ref _info, value, __eventArgs_info);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isLocked = new PropertyChangedEventArgs(nameof(IsLocked));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isLocked;
        public bool IsLocked
        {
            get => _isLocked;
            protected set => Set(ref _isLocked, value, __eventArgs_isLocked);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_improvementLevel = new PropertyChangedEventArgs(nameof(ImprovementLevel));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _improvementLevel;
        public int ImprovementLevel
        {
            get => _improvementLevel;
            protected set => Set(ref _improvementLevel, value, __eventArgs_improvementLevel);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_aerialProficiency = new PropertyChangedEventArgs(nameof(AerialProficiency));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _aerialProficiency;
        public int AerialProficiency
        {
            get => _aerialProficiency;
            protected set => Set(ref _aerialProficiency, value, __eventArgs_aerialProficiency);
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        private static readonly PropertyChangedEventArgs __eventArgs_isAvailable = new PropertyChangedEventArgs(nameof(IsAvailable));
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool _isAvailable;
        public bool IsAvailable
        {
            get => _isAvailable;
            protected set => Set(ref _isAvailable, value, __eventArgs_isAvailable);
        }
    }
    public sealed partial class PlayerSlotItem : SlotItem, IComparable<PlayerSlotItem>, IUpdatable<SlotItemId, RawSlotItem>
    {
        public int CompareTo(PlayerSlotItem other) => Id.CompareTo(other?.Id ?? default);

        public SlotItemId Id { get; }
        private readonly NavalBase _owner;

        public PlayerSlotItem(SlotItemId id, NavalBase owner)
        {
            Id = id;
            _owner = owner;
            CreateCore();
        }

        public PlayerSlotItem(RawSlotItem raw, NavalBase owner) : this(raw.Id, owner) => Update(raw);

        partial void CreateCore();

        public void Update(RawSlotItem raw)
        {
            IsLocked = raw.IsLocked;
            ImprovementLevel = raw.ImprovementLevel;
            AerialProficiency = raw.AerialProficiency;

            UpdateCore(raw);
        }

        [GeneratedCode("Game objects generator", "")]
        partial void UpdateCore(RawSlotItem raw);

        public override string ToString() => $"PlayerSlotItem {Id}";
    }

}
